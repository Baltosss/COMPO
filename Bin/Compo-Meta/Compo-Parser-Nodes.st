Object subclass: #CompoParseNode	instanceVariableNames: 'parent comments'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoParseNode methodsFor: 'visiting' stamp: 'PetrSpacek 10/19/2012 15:40'!acceptVisitor: visitor	visitor visitCompoParseNode: self.! !!CompoParseNode methodsFor: '*tools-explorer' stamp: 'PetrSpacek 10/19/2012 15:40'!explorerContents	self subclassResponsibility.! !!CompoParseNode methodsFor: 'printing' stamp: 'PetrSpacek 11/7/2012 19:31'!printOn: aStream 	aStream		nextPutAll: self class name;		nextPut: $(.	self identityHash printOn: aStream.	aStream		nextPut: $)! !!CompoParseNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:34'!children	^#()! !!CompoParseNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 23:57'!comments	"Answer the comments of the receiving parse tree node as intervals of starting and ending indices."		^ comments isNil ifTrue: [ #() ] ifFalse: [ comments ]! !!CompoParseNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 23:57'!comments: aCollection	comments := aCollection! !!CompoParseNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:50'!parent	^ parent! !!CompoParseNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:50'!parent: anObject	parent := anObject! !!CompoParseNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2012 18:21'!source	^parent notNil ifTrue: [parent source] ifFalse: [nil]! !!CompoParseNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:28'!statementComments	| statementComments |	statementComments := OrderedCollection withAll: self comments.	self children do: [:each | statementComments addAll: each statementComments].	^statementComments asSortedCollection: [:a :b | a first < b first]! !!CompoParseNode methodsFor: 'testing' stamp: 'PetrSpacek 11/8/2012 23:59'!isReturn	^ false.! !!CompoParseNode methodsFor: 'testing' stamp: 'PetrSpacek 10/19/2012 15:57'!isValue	^ false.! !!CompoParseNode methodsFor: 'adding' stamp: 'PetrSpacek 11/8/2012 23:56'!addComments: aCollectionOfIntervals	(aCollectionOfIntervals isNil or: [ aCollectionOfIntervals isEmpty ])		ifFalse: [ self comments: self comments , aCollectionOfIntervals ]! !CompoParseNode subclass: #CompoBindNode	instanceVariableNames: 'srcAddress destAddress kind'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoBindNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:56'!children	^ Array with: srcAddress with: destAddress.! !!CompoBindNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:54'!destAddress	^ destAddress! !!CompoBindNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:54'!destAddress: anObject	destAddress := anObject! !!CompoBindNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:41'!kind	^ kind! !!CompoBindNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:41'!kind: anObject	kind := anObject! !!CompoBindNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:54'!srcAddress	^ srcAddress! !!CompoBindNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:54'!srcAddress: anObject	srcAddress := anObject! !!CompoBindNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoBindNode: self! !CompoParseNode subclass: #CompoCollectionPortLiteralNode	instanceVariableNames: 'portName indexExpr'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoCollectionPortLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:24'!indexExpr	^ indexExpr! !!CompoCollectionPortLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:24'!indexExpr: anObject	indexExpr := anObject! !!CompoCollectionPortLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:24'!portName	^ portName! !!CompoCollectionPortLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:24'!portName: anObject	portName := anObject! !!CompoCollectionPortLiteralNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoCollectionPortLiteralNode: self! !CompoParseNode subclass: #CompoInRequirementsNode	instanceVariableNames: 'ports'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoInRequirementsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:40'!children	^(OrderedCollection new)		addAll: self ports;		yourself! !!CompoInRequirementsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports	^ ports! !!CompoInRequirementsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports: anObject	ports := anObject! !!CompoInRequirementsNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoInRequirementsNode: self! !CompoParseNode subclass: #CompoServiceNode	instanceVariableNames: 'signature body bodyStart bodyEnd'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:30'!body	^ body! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:30'!body: anObject	body := anObject! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:30'!bodyEnd	^ bodyEnd! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:30'!bodyEnd: anObject	bodyEnd := anObject! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:31'!bodyStart	^ bodyStart! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:31'!bodyStart: anObject	bodyStart := anObject! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:41'!children	^(OrderedCollection with: signature)		addAll: self body;		yourself! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:31'!signature	^ signature! !!CompoServiceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:31'!signature: anObject	signature := anObject! !!CompoServiceNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoServiceNode: self! !CompoParseNode subclass: #CompoInterfaceNode	instanceVariableNames: 'name extends body source'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!body	^ body! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!body: anObject	body := anObject! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:40'!children	^(OrderedCollection new)		addAll: self body;		yourself! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!extends	^ extends! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!extends: anObject	extends := anObject! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!name	^ name! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!name: anObject	name := anObject! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!source	^ source! !!CompoInterfaceNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:22'!source: anObject	source := anObject! !!CompoInterfaceNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoInterfaceNode: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoInterfaceNode class	instanceVariableNames: ''!!CompoInterfaceNode class methodsFor: 'instance creation' stamp: 'PetrSpacek 11/7/2012 18:22'!named: n extends: e body: b source: src	^ (self new)		name: n;		extends: e;		body: b;		source: src;		yourself.! !CompoBindNode subclass: #CompoConnectionNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoConnectionNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoConnectionNode: self! !CompoParseNode subclass: #CompoArchitectureNode	instanceVariableNames: 'conns disconns'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoArchitectureNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:38'!children	^(OrderedCollection new)		addAll: self conns;		addAll: self disconns;		yourself! !!CompoArchitectureNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:59'!conns	^ conns! !!CompoArchitectureNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:59'!conns: anObject	conns := anObject! !!CompoArchitectureNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:59'!disconns	^ disconns! !!CompoArchitectureNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:59'!disconns: anObject	disconns := anObject! !!CompoArchitectureNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoArchitectureNode: self! !CompoParseNode subclass: #CompoExProvisionsNode	instanceVariableNames: 'ports'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoExProvisionsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:39'!children	^(OrderedCollection new)		addAll: self ports;		yourself! !!CompoExProvisionsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports	^ ports! !!CompoExProvisionsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports: anObject	ports := anObject! !!CompoExProvisionsNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoExProvisionsNode: self! !CompoParseNode subclass: #CompoExRequirementsNode	instanceVariableNames: 'ports'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoExRequirementsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:39'!children	^(OrderedCollection new)		addAll: self ports;		yourself! !!CompoExRequirementsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports	^ ports! !!CompoExRequirementsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports: anObject	ports := anObject! !!CompoExRequirementsNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoExRequirementsNode: self! !CompoParseNode subclass: #CompoInProvisionsNode	instanceVariableNames: 'ports'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoInProvisionsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:40'!children	^(OrderedCollection new)		addAll: self ports;		yourself! !!CompoInProvisionsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports	^ ports! !!CompoInProvisionsNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:33'!ports: anObject	ports := anObject! !!CompoInProvisionsNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoInProvisionsNode: self! !CompoParseNode subclass: #CompoWhileNode	instanceVariableNames: 'condition body'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoWhileNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/11/2013 18:52'!acceptVisitor: visitor	visitor visitCompoWhileNode: self! !!CompoWhileNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 18:53'!body	^ body! !!CompoWhileNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 18:53'!body: anObject	body := anObject! !!CompoWhileNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 18:59'!children 	^(OrderedCollection with: (self condition))		addAll: self body;		yourself! !!CompoWhileNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 18:53'!condition	^ condition! !!CompoWhileNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 18:53'!condition: anObject	condition := anObject! !!CompoWhileNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/18/2013 20:32'!precedence	^0! !!CompoWhileNode methodsFor: 'testing' stamp: 'PetrSpacek 11/18/2013 20:34'!isMessage	^ false! !CompoParseNode subclass: #CompoDereferenceLiteralNode	instanceVariableNames: 'literal applicationsCount'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoDereferenceLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:24'!applicationsCount	^ applicationsCount! !!CompoDereferenceLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:24'!applicationsCount: anObject	applicationsCount := anObject! !!CompoDereferenceLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:24'!literal	^ literal! !!CompoDereferenceLiteralNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/8/2012 13:24'!literal: anObject	literal := anObject! !!CompoDereferenceLiteralNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoDereferenceLiteralNode: self! !CompoParseNode subclass: #CompoServiceSignNode	instanceVariableNames: 'selector arguments'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoServiceSignNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:11'!arguments	^ arguments! !!CompoServiceSignNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/22/2013 14:02'!arguments: anArray 	anArray		ifNil: [ arguments := #() ]		ifNotNil: [ arguments := anArray ]! !!CompoServiceSignNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:11'!selector	^ selector! !!CompoServiceSignNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 18:11'!selector: anObject	selector := anObject! !!CompoServiceSignNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoServiceSignNode: self! !CompoParseNode subclass: #CompoIfNode	instanceVariableNames: 'condition ifBody elseBody'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoIfNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/11/2013 19:15'!acceptVisitor: visitor	visitor visitCompoIfNode: self! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:13'!children 	^(OrderedCollection with: (self condition))		addAll: self ifBody;		addAll: self elseBody;		yourself! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:14'!condition	^ condition.! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:14'!condition: anObject	condition := anObject! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:14'!elseBody	^ elseBody.! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:14'!elseBody: anObject	elseBody := anObject! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:14'!ifBody	^ ifBody.! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:14'!ifBody: anObject	ifBody := anObject! !!CompoIfNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/18/2013 20:32'!precedence	^0! !!CompoIfNode methodsFor: 'testing' stamp: 'PetrSpacek 11/18/2013 20:34'!isMessage	^ false! !CompoParseNode subclass: #CompoDescriptorNode	instanceVariableNames: 'name metadesc extends body source'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:16'!body	^ body! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:16'!body: anObject	body := anObject! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:39'!children	^(OrderedCollection new)		addAll: self body;		yourself! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:17'!extends	^ extends! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:17'!extends: anObject	extends := anObject! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 21:24'!metadesc	^ metadesc! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 21:24'!metadesc: anObject	metadesc := anObject! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:17'!name	^ name! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:17'!name: anObject	name := anObject! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:18'!source	^ source! !!CompoDescriptorNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 23:18'!source: anObject	source := anObject! !!CompoDescriptorNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoDescriptorNode: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoDescriptorNode class	instanceVariableNames: ''!!CompoDescriptorNode class methodsFor: 'instance creation' stamp: 'PetrSpacek 10/19/2012 23:19'!named: n extends: e body: b source: src	^ (self new)		name: n;		extends: e;		body: b;		source: src;		yourself.! !!CompoDescriptorNode class methodsFor: 'instance creation' stamp: 'PetrSpacek 11/11/2013 21:26'!named: n metadesc: m extends: e body: b source: src	^ (self new)		name: n;		metadesc: m;		extends: e;		body: b;		source: src;		yourself.! !CompoParseNode subclass: #CompoPortAddressNode	instanceVariableNames: 'left right parentheses'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoPortAddressNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 23:39'!addParenthesis: anInterval 	parentheses isNil ifTrue: [parentheses := OrderedCollection new: 1].	parentheses add: anInterval! !!CompoPortAddressNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:55'!children	(right isKindOf: (Smalltalk at: #CompoParseNode)) ifTrue: [ ^ OrderedCollection with: right ].	^ super children.! !!CompoPortAddressNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:12'!left	^ left! !!CompoPortAddressNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:12'!left: anObject	left := anObject! !!CompoPortAddressNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:12'!right	^ right! !!CompoPortAddressNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 19:12'!right: anObject	right := anObject! !!CompoPortAddressNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoPortAddressNode: self! !CompoParseNode subclass: #CompoServiceInvocationNode	instanceVariableNames: 'receiver selector arguments parentheses'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 23:41'!addParenthesis: anInterval 	parentheses isNil ifTrue: [parentheses := OrderedCollection new: 1].	parentheses add: anInterval! !!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:48'!arguments	^ arguments! !!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:48'!arguments: anObject	arguments := anObject! !!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 17:53'!children	arguments		ifNil: [^ OrderedCollection with: receiver ]		ifNotNil: [ ^(OrderedCollection with: self receiver) addAll: self arguments;	yourself ]! !!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:48'!receiver	^ receiver! !!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:48'!receiver: anObject	receiver := anObject! !!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:48'!selector	^ selector! !!CompoServiceInvocationNode methodsFor: 'accessing' stamp: 'PetrSpacek 10/19/2012 15:48'!selector: anObject	selector := anObject! !!CompoServiceInvocationNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoServiceInvocationNode: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoServiceInvocationNode class	instanceVariableNames: ''!!CompoServiceInvocationNode class methodsFor: 'instance creation' stamp: 'PetrSpacek 10/19/2012 15:47'!receiver: recv selector: sel arguments: args	^ (self new)	      receiver: recv;	      selector: sel;	      arguments: args;	      yourself.! !CompoParseNode subclass: #CompoPortNode	instanceVariableNames: 'pName pInterface pKind pIsCollectionPort pInjection'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pInjection	^ pInjection! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pInjection: anObject	pInjection := anObject! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pInterface	^ pInterface! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pInterface: anObject	pInterface := anObject! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pIsAtomic	^ pIsAtomic! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pIsAtomic: anObject	pIsAtomic := anObject! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/10/2012 00:31'!pIsCollectionPort	^ pIsCollectionPort! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/10/2012 00:31'!pIsCollectionPort: anObject	pIsCollectionPort := anObject! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pKind	^ pKind! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:56'!pKind: anObject	pKind := anObject! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:57'!pName	^ pName! !!CompoPortNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/7/2012 15:57'!pName: anObject	pName := anObject! !!CompoPortNode methodsFor: 'testing' stamp: 'PetrSpacek 11/7/2012 17:01'!isExternal	^ ( ((self parent) isKindOf: (Smalltalk at: #CompoExProvisionsNode))		or:		[(self parent) isKindOf: (Smalltalk at: #CompoExRequirementsNode)] )! !!CompoPortNode methodsFor: 'testing' stamp: 'PetrSpacek 11/7/2012 17:01'!isInternal	^ ( ((self parent) isKindOf: (Smalltalk at: #CompoInProvisionsNode))		or:		[(self parent) isKindOf: (Smalltalk at: #CompoInRequirementsNode)] )! !!CompoPortNode methodsFor: 'testing' stamp: 'PetrSpacek 11/7/2012 16:44'!isProvided 	^ ( ((self parent) isKindOf: (Smalltalk at: #CompoExProvisionsNode))		or:		[(self parent) isKindOf: (Smalltalk at: #CompoInProvisionsNode)] )! !!CompoPortNode methodsFor: 'testing' stamp: 'PetrSpacek 11/7/2012 17:01'!isRequired 	^ ( ((self parent) isKindOf: (Smalltalk at: #CompoExRequirementsNode))		or:		[(self parent) isKindOf: (Smalltalk at: #CompoInRequirementsNode)] )! !!CompoPortNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoPortNode: self! !CompoWhileNode subclass: #CompoForNode	instanceVariableNames: 'incrementation seed'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoForNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/18/2013 17:31'!acceptVisitor: visitor	visitor visitCompoForNode: self.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:03'!body	^ body.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:03'!body: anObject	body := anObject.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:11'!children 	^(OrderedCollection with: (self seed) with: (self condition) with: (self incrementation ))		addAll: self body;		yourself! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:03'!condition	^ condition.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:10'!condition: anObject	condition  := anObject.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:03'!incrementation	^ incrementation.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:10'!incrementation: anObject	incrementation  := anObject.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:03'!seed	^ seed.! !!CompoForNode methodsFor: 'accessing' stamp: 'PetrSpacek 11/11/2013 19:03'!seed: anObject	seed := anObject.! !CompoBindNode subclass: #CompoDisconnectionNode	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Parser-Nodes'!!CompoDisconnectionNode methodsFor: 'visiting' stamp: 'PetrSpacek 11/9/2012 09:55'!acceptVisitor: visitor
	visitor visitCompoDisconnectionNode: self! !