Object subclass: #CompoExamples	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoExamples class	instanceVariableNames: ''!!CompoExamples class methodsFor: 'examples' stamp: 'PetrSpacek 11/15/2012 01:37'!constraintExampleCompiler evaluate: (CompoToSmalltalk convert: 'component descriptor AreReqsSatisfied extends Constraint {  provides {    checking : { check() }  }  service check() {    |res|    res := true;    context.getPorts().withIndexDo( [:p :i | &p.isRequired().ifTrue( [res := res.and([&p.isConnected()]) ]) ]);    return res;  }}')! !!CompoExamples class methodsFor: 'examples' stamp: 'PetrSpacek 11/15/2012 11:09'!helloerExampleCompiler evaluate: (CompoToSmalltalk convert: 'component descriptor Helloer {  provides {    default : { sayHello(); }  }  requires {    printer : { print(msg); }  }  service sayHello() {    printer.print(''Welcome in the world of Compo'');  }}').Compiler evaluate: (CompoToSmalltalk convert: 'component descriptor Printer {  provides {    printing : { print(msg); }  }  service print(msg) {    Transcript.crShow((''Compo sais>> '', msg));  }}').Compiler evaluate: (CompoToSmalltalk convert: 'component descriptor HelloApp {  provides {    default : { run(); }  }  internally requires {    helloer : { sayHello(); };    myPrinter : { print(msg); }  }  architecture {    connect myPrinter@myself to default@(Printer.new());    connect helloer@myself to default@(Helloer.new());    connect printer@helloer to printing@myPrinter;  }  service run() {    helloer.sayHello();  }}').	Compiler evaluate: (CompoToSmalltalk convert: 'component descriptor HelloApp2 extends HelloApp {  internally requires {    reverser : #*  }  architecture {    connect reverser@myself to default@(Reverser.new());    disconnect printer@helloer from printing@myPrinter;    connect printer@helloer to in@reverser;    connect out@reverser to printing@myPrinter;	  }}').	Compiler evaluate: (CompoToSmalltalk convert: 'component descriptor Reverser {  provides {    in : { print(msg) }  }  requires {    out : {print(msg) }  }  service print(msg)  {     out.print(msg.reverse());  }}').! !!CompoExamples class methodsFor: 'examples' stamp: 'PetrSpacek 11/15/2012 01:50'!memoDescExampleCompiler evaluate: (CompoToSmalltalk convert: 'component descriptor MemoDescriptor extends ComponentDescriptor  {  requires {    sons[] : #*  }  service new() {    |inst|    inst := ssuper.new();    &sons.connectTo(inst);    return inst  }}').! !!CompoExamples class methodsFor: 'examples' stamp: 'PetrSpacek 11/13/2012 20:42'!milesToKmsExampleCompiler evaluate: (CompoToSmalltalk convert: 'component descriptor MilesMetricConverter {  provides {    main : { milesToKms(miles); }  }  requires {    calc : { mul(a,b) }  }  service milesToKms(miles) {    return calc.mul(miles,1.609)  }}').Compiler evaluate: (CompoToSmalltalk convert: 'component descriptor Calc {  provides {    arith : { add(a, b); mul(a, b) }  }  service add(a, b) {return a + b}  service mul(a, b) {return a * b}}').Compiler evaluate: (CompoToSmalltalk convert: 'component descriptor TestConverter {	provides { default : {run()}}	internally requires {		convertor : {milesToKms(miles)};		calc : {mul(a,b)}	}	architecture {		connect convertor@myself to main@(MilesMetricConverter.new());		connect calc@myself to main@(Calc.new());		connect calc@convertor to arith@calc;	}		service run() {		return convertor.milesToKms(1);	}}').! !Workspace subclass: #CompoWorkspace	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!CompoWorkspace methodsFor: 'initialization' stamp: 'PetrSpacek 11/13/2012 14:48'!initialize 	super initialize.	stylingActive := false.	"self acceptAction: [:code | code inspect]"! !!CompoWorkspace methodsFor: 'toolbuilder' stamp: 'PetrSpacek 11/13/2012 15:42'!buildTextMorph 	| morph |	morph := PluggableTextMorphForCompoWorkspace			on: self 			text: #contents 			accept: #acceptContents:			readSelection: nil 			menu: #codePaneMenu:shifted: .				morph font: StandardFonts codeFont.	morph styler workspace: self.	^ morph! !!CompoWorkspace methodsFor: 'styling' stamp: 'PetrSpacek 11/13/2012 15:47'!toggleStylingActive	"do nothing"	^ stylingActive.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoWorkspace class	instanceVariableNames: ''!!CompoWorkspace class methodsFor: 'as yet unclassified' stamp: 'PetrSpacek 10/17/2012 16:27'!open	^ self openLabel: 'CompoWorkspace' ! !PluggableTextMorph subclass: #PluggableTextMorphForCompoWorkspace	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!PluggableTextMorphForCompoWorkspace methodsFor: 'private' stamp: 'PetrSpacek 11/13/2012 15:44'!textMorphClass	^ TextMorphForEditViewForCompoWorkspace! !TextMorphForEditView subclass: #TextMorphForEditViewForCompoWorkspace	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!TextMorphForEditViewForCompoWorkspace methodsFor: 'private' stamp: 'PetrSpacek 11/13/2012 15:41'!editorClass	"Answer the class used to create the receiver's editor"		^CompoEditor! !Object subclass: #CompoInspector	instanceVariableNames: 'subject selectionIndex contents contentsSelectionIndex interfacePortSelectionIndex interfaceContentsSelectionIndex'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!CompoInspector methodsFor: 'accessing' stamp: 'PetrSpacek 11/5/2012 18:29'!contents	^ contents ifNil: [ contents := self getConnectedPortsOfSelectedPort ].! !!CompoInspector methodsFor: 'accessing' stamp: 'PetrSpacek 11/5/2012 18:07'!contentsSelectionIndex	^ contentsSelectionIndex.! !!CompoInspector methodsFor: 'accessing' stamp: 'PetrSpacek 11/6/2012 10:46'!interfaceContentsSelectionIndex	^ interfaceContentsSelectionIndex.! !!CompoInspector methodsFor: 'accessing' stamp: 'PetrSpacek 11/6/2012 10:46'!interfacePortSelectionIndex	^ interfacePortSelectionIndex.! !!CompoInspector methodsFor: 'accessing' stamp: 'PetrSpacek 11/5/2012 15:34'!selectionIndex	^ selectionIndex.! !!CompoInspector methodsFor: 'accessing' stamp: 'PetrSpacek 11/5/2012 15:17'!subject	^ subject! !!CompoInspector methodsFor: 'accessing' stamp: 'PetrSpacek 11/13/2012 20:25'!subject: anObject	subject := anObject.	! !!CompoInspector methodsFor: 'gui-helpers-contents-interface' stamp: 'PetrSpacek 11/6/2012 10:40'!interfaceContentsInspectSelection	! !!CompoInspector methodsFor: 'gui-helpers-contents-interface' stamp: 'PetrSpacek 11/6/2012 10:40'!interfaceContentsInspectorKey: aChar from: view	"Respond to a Command key issued while the cursor is over my field list"	aChar == $i ifTrue: [^ self contentsSelection inspect].	aChar == $I ifTrue: [^ self contentsSelection explore].	aChar == $b ifTrue:	[^ self browseMethodFull].	aChar == $h ifTrue:	[^ self classHierarchy].	aChar == $c ifTrue: [^ self copyName].	aChar == $p ifTrue: [^ self browseFullProtocol].	aChar == $N ifTrue: [^ self browseClassRefs].	^ false! !!CompoInspector methodsFor: 'gui-helpers-contents-interface' stamp: 'PetrSpacek 11/6/2012 11:03'!interfaceContentsList	|ar|	ar := OrderedCollection new.		self contents isEmpty ifFalse: [		|indent|		ar add: 'interface of above selected port #' , (self contentsSelection getName asString) , ':'.		indent := '  #'.		((self contentsSelection getInterface) isKindOf: (Smalltalk at: #Collection))			ifTrue: [ (self contentsSelection getInterface) do: [:s | ar add: (indent , s asString)] ]			ifFalse: [ ar add: (indent, self contentsSelection getInterface asString)].	].	^ ar asArray .! !!CompoInspector methodsFor: 'gui-helpers-contents-interface' stamp: 'PetrSpacek 11/6/2012 10:42'!interfaceContentsListMenu: aMenu	"Arm the supplied menu with items for the field-list of the receiver"	aMenu addStayUpItemSpecial.	aMenu addList: #(		('Inspect (i)'						inspectSelection nil #smallInspectItIcon)		('Explore (I)'						exploreSelection nil #smallInspectItIcon)).	self addCollectionItemsTo: aMenu.	aMenu addList: #(		-		('Method refs to this inst var'		referencesToSelection)		('Methods storing into this inst var'	defsOfSelection)		('Objects pointing to this value'		objectReferencesToSelection)		('Explore pointers'					explorePointers)		-		('Browse full (b)'					browseMethodFull)		('Browse class'						browseClass)		('Browse hierarchy (h)'				classHierarchy)		('Browse protocol (p)'				browseFullProtocol)		-		('Inst var refs...'					browseInstVarRefs)		('Inst var defs...'					browseInstVarDefs)		('Class var refs...'					classVarRefs)		('Class variables'					browseClassVariables)		('Class refs (N)'						browseClassRefs)		-		('Copy name (c)'					copyName)				('Basic inspect'						inspectBasic)		).	^ aMenu! !!CompoInspector methodsFor: 'gui-helpers-contents-interface' stamp: 'PetrSpacek 11/6/2012 10:53'!interfaceContentsSelection	contentsSelectionIndex = 0 ifTrue: [^ ''].	"selectionIndex = 1 ifTrue: [^ subject]."	^ self interfaceContentsList at: contentsSelectionIndex.	! !!CompoInspector methodsFor: 'gui-helpers-contents-interface' stamp: 'PetrSpacek 11/6/2012 10:53'!interfaceContentsToggleIndex: anInteger		selectionIndex = anInteger		ifTrue: 			["same index, turn off selection"			interfaceContentsSelectionIndex := 0.						]		ifFalse:			["different index, new selection"			interfaceContentsSelectionIndex := anInteger.						].			self changed: #interfaceContentsSelection.	self changed: #interfaceContentsSelectionIndex.! !!CompoInspector methodsFor: 'gui-helpers-subject' stamp: 'PetrSpacek 11/5/2012 17:34'!inspectSelection	"Create and schedule an Inspector on the receiver's model's currently selected object."	self selectionIndex = 0 ifTrue: [^ self changed: #flash].	self selection compoInspect.	^ self selection! !!CompoInspector methodsFor: 'gui-helpers-subject' stamp: 'PetrSpacek 11/5/2012 15:36'!inspectorKey: aChar from: view	"Respond to a Command key issued while the cursor is over my field list"	aChar == $i ifTrue: [^ self selection inspect].	aChar == $I ifTrue: [^ self selection explore].	aChar == $b ifTrue:	[^ self browseMethodFull].	aChar == $h ifTrue:	[^ self classHierarchy].	aChar == $c ifTrue: [^ self copyName].	aChar == $p ifTrue: [^ self browseFullProtocol].	aChar == $N ifTrue: [^ self browseClassRefs].	^ false! !!CompoInspector methodsFor: 'gui-helpers-subject' stamp: 'PetrSpacek 11/6/2012 09:39'!portList		^ self getPortsOfSubject.! !!CompoInspector methodsFor: 'gui-helpers-subject' stamp: 'PetrSpacek 11/5/2012 15:36'!portListMenu: aMenu	"Arm the supplied menu with items for the field-list of the receiver"	aMenu addStayUpItemSpecial.	aMenu addList: #(		('Inspect (i)'						inspectSelection nil #smallInspectItIcon)		('Explore (I)'						exploreSelection nil #smallInspectItIcon)).	self addCollectionItemsTo: aMenu.	aMenu addList: #(		-		('Method refs to this inst var'		referencesToSelection)		('Methods storing into this inst var'	defsOfSelection)		('Objects pointing to this value'		objectReferencesToSelection)		('Explore pointers'					explorePointers)		-		('Browse full (b)'					browseMethodFull)		('Browse class'						browseClass)		('Browse hierarchy (h)'				classHierarchy)		('Browse protocol (p)'				browseFullProtocol)		-		('Inst var refs...'					browseInstVarRefs)		('Inst var defs...'					browseInstVarDefs)		('Class var refs...'					classVarRefs)		('Class variables'					browseClassVariables)		('Class refs (N)'						browseClassRefs)		-		('Copy name (c)'					copyName)				('Basic inspect'						inspectBasic)		).	^ aMenu! !!CompoInspector methodsFor: 'gui-helpers-subject' stamp: 'PetrSpacek 11/6/2012 09:39'!selection	selectionIndex = 0 ifTrue: [^ ''].	"selectionIndex = 1 ifTrue: [^ subject]."	^ self getPortsOfSubject at: selectionIndex.	! !!CompoInspector methodsFor: 'gui-helpers-subject' stamp: 'PetrSpacek 11/6/2012 10:50'!toggleIndex: anInteger		selectionIndex = anInteger		ifTrue: 			["same index, turn off selection"			selectionIndex := 0.			contents := Array new.			]		ifFalse:			["different index, new selection"			selectionIndex := anInteger.			contents := self getConnectedPortsOfSelectedPort.			].			self changed: #selection.	self changed: #contents.	self changed: #selectionIndex.	self changed: #interfacePortList.	self changed: #interfaceContentsList.! !!CompoInspector methodsFor: 'gui-helpers-contents' stamp: 'PetrSpacek 11/8/2013 18:30'!contentsInspectSelection	"Create and schedule an Inspector on the receiver's model's currently selected object."	|pOwner|	self contentsSelectionIndex = 0 ifTrue: [^ self changed: #flash].	pOwner := (self contentsSelection instVarNamed: #owner).	(pOwner isKindOf: (Smalltalk at: #Component))		ifTrue: [ pOwner compoInspect]		ifFalse: [ pOwner inspect ].	^ self contentsSelection! !!CompoInspector methodsFor: 'gui-helpers-contents' stamp: 'PetrSpacek 11/5/2012 18:09'!contentsInspectorKey: aChar from: view	"Respond to a Command key issued while the cursor is over my field list"	aChar == $i ifTrue: [^ self contentsSelection inspect].	aChar == $I ifTrue: [^ self contentsSelection explore].	aChar == $b ifTrue:	[^ self browseMethodFull].	aChar == $h ifTrue:	[^ self classHierarchy].	aChar == $c ifTrue: [^ self copyName].	aChar == $p ifTrue: [^ self browseFullProtocol].	aChar == $N ifTrue: [^ self browseClassRefs].	^ false! !!CompoInspector methodsFor: 'gui-helpers-contents' stamp: 'PetrSpacek 11/5/2012 18:09'!contentsListMenu: aMenu	"Arm the supplied menu with items for the field-list of the receiver"	aMenu addStayUpItemSpecial.	aMenu addList: #(		('Inspect (i)'						inspectSelection nil #smallInspectItIcon)		('Explore (I)'						exploreSelection nil #smallInspectItIcon)).	self addCollectionItemsTo: aMenu.	aMenu addList: #(		-		('Method refs to this inst var'		referencesToSelection)		('Methods storing into this inst var'	defsOfSelection)		('Objects pointing to this value'		objectReferencesToSelection)		('Explore pointers'					explorePointers)		-		('Browse full (b)'					browseMethodFull)		('Browse class'						browseClass)		('Browse hierarchy (h)'				classHierarchy)		('Browse protocol (p)'				browseFullProtocol)		-		('Inst var refs...'					browseInstVarRefs)		('Inst var defs...'					browseInstVarDefs)		('Class var refs...'					classVarRefs)		('Class variables'					browseClassVariables)		('Class refs (N)'						browseClassRefs)		-		('Copy name (c)'					copyName)				('Basic inspect'						inspectBasic)		).	^ aMenu! !!CompoInspector methodsFor: 'gui-helpers-contents' stamp: 'PetrSpacek 11/5/2012 18:10'!contentsSelection	contentsSelectionIndex = 0 ifTrue: [^ ''].	"selectionIndex = 1 ifTrue: [^ subject]."	^ self contents at: contentsSelectionIndex.	! !!CompoInspector methodsFor: 'gui-helpers-contents' stamp: 'PetrSpacek 11/6/2012 10:50'!contentsToggleIndex: anInteger		selectionIndex = anInteger		ifTrue: 			["same index, turn off selection"			contentsSelectionIndex := 0.						]		ifFalse:			["different index, new selection"			contentsSelectionIndex := anInteger.						].			self changed: #contentsSelection.	self changed: #contentsSelectionIndex.	self changed: #interfaceContentsList.! !!CompoInspector methodsFor: 'gui-helpers' stamp: 'PetrSpacek 11/11/2013 15:24'!windowLabel	|desc kind name|	desc := self subject class.	kind := 'Unknown'.	((desc printString findString: ' class') = 0)				ifTrue: [ kind := desc printString]				ifFalse: [					((desc superclass printString findString: ' class') = 0)						ifTrue: [ kind := desc superclass printString ]						ifFalse: [  kind := 'Descriptor' ].				].		name := nil.	((name isNil) and: [(self subject) isKindOf: (Smalltalk at: #Port)])		ifTrue: [name := self subject getName].	((name isNil) and: [(self subject) isKindOf: (Smalltalk at: #AtomicPort)])		ifTrue: [name := self subject getName].	"(name isNil)		ifTrue: [name := self subject name asString]."	(name isNil) ifTrue: [ name := '' ] ifFalse: [ name := '[''' , name , ''']'].		^ 'a ', kind , name.! !!CompoInspector methodsFor: 'gui-helpers-subject-interface' stamp: 'PetrSpacek 11/6/2012 10:43'!interfacePortInspectSelection	! !!CompoInspector methodsFor: 'gui-helpers-subject-interface' stamp: 'PetrSpacek 11/6/2012 10:43'!interfacePortInspectorKey: aChar from: view	"Respond to a Command key issued while the cursor is over my field list"	aChar == $i ifTrue: [^ self contentsSelection inspect].	aChar == $I ifTrue: [^ self contentsSelection explore].	aChar == $b ifTrue:	[^ self browseMethodFull].	aChar == $h ifTrue:	[^ self classHierarchy].	aChar == $c ifTrue: [^ self copyName].	aChar == $p ifTrue: [^ self browseFullProtocol].	aChar == $N ifTrue: [^ self browseClassRefs].	^ false! !!CompoInspector methodsFor: 'gui-helpers-subject-interface' stamp: 'PetrSpacek 11/6/2012 11:04'!interfacePortList	|ar indent|	ar := OrderedCollection new.	ar add: 'interface of above selected port #' , (self selection getName asString) , ':'.		indent := '  #'.	((self selection getInterface) isKindOf: (Smalltalk at: #Collection))		ifTrue: [ (self selection getInterface) do: [:s | ar add: (indent , s asString)] ]		ifFalse: [ ar add: (indent, self selection getInterface asString)].	^ ar asArray .! !!CompoInspector methodsFor: 'gui-helpers-subject-interface' stamp: 'PetrSpacek 11/6/2012 10:44'!interfacePortListMenu: aMenu	"Arm the supplied menu with items for the field-list of the receiver"	aMenu addStayUpItemSpecial.	aMenu addList: #(		('Inspect (i)'						inspectSelection nil #smallInspectItIcon)		('Explore (I)'						exploreSelection nil #smallInspectItIcon)).	self addCollectionItemsTo: aMenu.	aMenu addList: #(		-		('Method refs to this inst var'		referencesToSelection)		('Methods storing into this inst var'	defsOfSelection)		('Objects pointing to this value'		objectReferencesToSelection)		('Explore pointers'					explorePointers)		-		('Browse full (b)'					browseMethodFull)		('Browse class'						browseClass)		('Browse hierarchy (h)'				classHierarchy)		('Browse protocol (p)'				browseFullProtocol)		-		('Inst var refs...'					browseInstVarRefs)		('Inst var defs...'					browseInstVarDefs)		('Class var refs...'					classVarRefs)		('Class variables'					browseClassVariables)		('Class refs (N)'						browseClassRefs)		-		('Copy name (c)'					copyName)				('Basic inspect'						inspectBasic)		).	^ aMenu! !!CompoInspector methodsFor: 'gui-helpers-subject-interface' stamp: 'PetrSpacek 11/6/2012 10:52'!interfacePortSelection	contentsSelectionIndex = 0 ifTrue: [^ ''].	"selectionIndex = 1 ifTrue: [^ subject]."	^ self interfacePortList at: contentsSelectionIndex.	! !!CompoInspector methodsFor: 'gui-helpers-subject-interface' stamp: 'PetrSpacek 11/6/2012 10:54'!interfacePortToggleIndex: anInteger		selectionIndex = anInteger		ifTrue: 			["same index, turn off selection"			interfacePortSelectionIndex := 0.						]		ifFalse:			["different index, new selection"			interfacePortSelectionIndex := anInteger.						].			self changed: #interfacePortSelection.	self changed: #interfacePortSelectionIndex.! !!CompoInspector methodsFor: 'initialize-release' stamp: 'PetrSpacek 11/6/2012 10:47'!initialize		selectionIndex := 1.	contentsSelectionIndex := 1.	interfaceContentsSelectionIndex := 1.	interfacePortSelectionIndex := 1.	super initialize! !!CompoInspector methodsFor: 'private' stamp: 'PetrSpacek 11/7/2013 00:48'!getConnectedPortsOfSelectedPort	|selP ar |	selP := self selection.	(selP isKindOf: (Smalltalk at: #AtomicPort))		ifTrue: [ar := selP instVarNamed: #connectedPorts]		ifFalse: [			(selP isKindOf: (Smalltalk at: #Port))				ifTrue: [					|connectedPorts|					ar := OrderedCollection new.					connectedPorts := ((selP instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts.					connectedPorts withIndexDo: [ :port :i |						((port instVarNamed: #owner) isKindOf: (Smalltalk at: #Port))							ifTrue: [ar add:(port instVarNamed: #owner)]							ifFalse: [ ar add: port].					].				]				ifFalse: [ ar := Array new].		].				^ ar asArray.	! !!CompoInspector methodsFor: 'private' stamp: 'PetrSpacek 11/7/2013 00:36'!getPortsOfSubject	(subject isKindOf: (Smalltalk at: #Component))		ifTrue: [ 			^ (subject instVarNamed: #ports) asArray.		]		ifFalse: [ 			^ Array with: subject defaultPort.		].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoInspector class	instanceVariableNames: ''!!CompoInspector class methodsFor: 'instance creation' stamp: 'PetrSpacek 11/5/2012 15:41'!newOnComponent: aComponent	^ self new subject: aComponent; yourself.		! !!CompoInspector class methodsFor: 'instance creation' stamp: 'Fred 10/15/2014 08:42'!openOn: aComponent	|inst window|	inst := self newOnComponent: aComponent.	window := self createUI: inst.		window openInWorld.		! !!CompoInspector class methodsFor: 'gui' stamp: 'PetrSpacek 11/6/2012 10:45'!createUI: aCompoInspector		| window |	window := (SystemWindow labelled: (aCompoInspector windowLabel)) model: aCompoInspector.		window		addMorph: ((PluggableListMorph new doubleClickSelector: #inspectSelection;				on: aCompoInspector				list: #portList				selected: #selectionIndex				changeSelected: #toggleIndex:				menu: #portListMenu:				keystroke: #inspectorKey:from:) 				autoDeselect: false )				"For doubleClick to work best disable autoDeselect"		frame: (0 @ 0 corner: aCompoInspector class horizontalDividerProportion @ aCompoInspector class verticalDividerProportion).	window		addMorph: ((PluggableListMorph new doubleClickSelector: #contentsInspectSelection;				on: aCompoInspector				list: #contents				selected: #contentsSelectionIndex				changeSelected: #contentsToggleIndex:				menu: #contentsListMenu:				keystroke: #contentsInspectorKey:from:) 				autoDeselect: false )				"For doubleClick to work best disable autoDeselect"		frame: (aCompoInspector class horizontalDividerProportion @ 0 corner: 1 @ aCompoInspector class verticalDividerProportion).	window		addMorph: ((PluggableListMorph new doubleClickSelector: #interfacePortInspectSelection;				on: aCompoInspector				list: #interfacePortList				selected: #interfacePortSelectionIndex				changeSelected: #interfacePortToggleIndex:				menu: #interfacePortListMenu:				keystroke: #interfacePortInspectorKey:from:) 				autoDeselect: false )				"For doubleClick to work best disable autoDeselect"		frame: (0 @ aCompoInspector class verticalDividerProportion corner: aCompoInspector class horizontalDividerProportion @ 1).	window		addMorph: ((PluggableListMorph new doubleClickSelector: #interfaceContentsInspectSelection;				on: aCompoInspector				list: #interfaceContentsList				selected: #interfaceContentsSelectionIndex				changeSelected: #interfaceContentsToggleIndex:				menu: #interfaceContentsListMenu:				keystroke: #interfaceContentsInspectorKey:from:) 				autoDeselect: false )				"For doubleClick to work best disable autoDeselect"		frame: (aCompoInspector class horizontalDividerProportion @ aCompoInspector class verticalDividerProportion corner: 1 @ 1).		window setUpdatablePanesFrom: #(#portList ).	window position: 16 @ 0.	"Room for scroll bar."	^ window! !!CompoInspector class methodsFor: 'gui' stamp: 'PetrSpacek 11/6/2012 10:13'!horizontalDividerProportion	^ 0.5! !!CompoInspector class methodsFor: 'gui' stamp: 'PetrSpacek 11/6/2012 10:13'!verticalDividerProportion	^ 0.7! !Object subclass: #CompoWorkspace2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!CompoWorkspace2 methodsFor: 'instance creation' stamp: 'PetrSpacek 11/25/2013 12:57'!initialize 	self class compile: 'doitCode	^ String new.' classified: 'model'.! !!CompoWorkspace2 methodsFor: 'instance creation' stamp: 'PetrSpacek 11/25/2013 12:56'!open	| browser doitBlock inspectBlock |	browser := GLMTabulator new.	browser title: (self class title).	browser row: [:r | r column: #main ] .			doitBlock :=  [ :x |		|smCode|		smCode := [CompoToSmalltalk convert: x text] on: Error do: [:e | self inform: (e messageText). browser error: (e messageText). ].		"Compiler evaluate: (smCode)."		self class compile: 'doitCode		^ [', smCode ,'] value' classified: 'model'.		self doitCode.	].	inspectBlock :=  [ :x |				|smCode|		smCode := [CompoToSmalltalk convert: x text] on: Error do: [:e | self inform: (e messageText). browser error: (e messageText). ].		"Compiler evaluate: (smCode)."		self class compile: 'doitCode		^ [', smCode ,'] value' classified: 'model'.		self doitCode compoInspect .		].		browser transmit to: #main;  andShow: [:a | 		a text			display: [ :compoWS | (compoWS doitCode)];			act: doitBlock on: $d entitled: 'Do it';			selectionAct: doitBlock on: $d entitled: 'Do it';			act: doitBlock on: $s;			act: inspectBlock on: $i entitled: 'Inspect it';			selectionAct: inspectBlock on: $i entitled: 'Inspect it'.	].		browser openOn: self. ! !!CompoWorkspace2 methodsFor: 'model' stamp: 'PetrSpacek 11/25/2013 13:42'!doitCode		^ [| h p p2 |h := ((Helloer cs__getPortNamed__par01: #default) cs__invoke__par01: (ServiceInvocation selector: #new arguments: {} originPort: (Helloer cs__getPortNamed__par01: #default) ) par02: false).p := ((MorphPrinter cs__getPortNamed__par01: #default) cs__invoke__par01: (ServiceInvocation selector: #new arguments: {} originPort: (MorphPrinter cs__getPortNamed__par01: #default) ) par02: false).p2 := ((Printer cs__getPortNamed__par01: #default) cs__invoke__par01: (ServiceInvocation selector: #new arguments: {} originPort: (Printer cs__getPortNamed__par01: #default) ) par02: false).(((h) cs__invoke__par01: (ServiceInvocation selector: #getPortNamed arguments: { #'printer'} originPort: (h) index: nil) par02: false))	cs__connectTo__par01: (((p) cs__invoke__par01: (ServiceInvocation selector: #getPortNamed arguments: { #'printing'} originPort: (p) index: nil) par02: false))..(((h) cs__invoke__par01: (ServiceInvocation selector: #getPortNamed arguments: { #'printer'} originPort: (h) index: nil) par02: false))	cs__connectTo__par01: (((p2) cs__invoke__par01: (ServiceInvocation selector: #getPortNamed arguments: { #'printing'} originPort: (p2) index: nil) par02: false))..((h) cs__invoke__par01: (ServiceInvocation selector: #sayHello arguments: {} originPort: (h) ) par02: false)] value! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoWorkspace2 class	instanceVariableNames: ''!!CompoWorkspace2 class methodsFor: 'instance creation' stamp: 'PetrSpacek 11/25/2013 11:36'!open	^ self new open.! !!CompoWorkspace2 class methodsFor: 'specs' stamp: 'PetrSpacek 11/25/2013 11:37'!title	^ 'Compo Workspace'.! !SmalltalkEditor subclass: #CompoEditor	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!CompoEditor methodsFor: 'do-its' stamp: 'PetrSpacek 11/25/2013 02:38'!evaluateSelectionAndDo: aBlock	"Treat the current selection as an expression; evaluate it and invoke aBlock with the result."	^ super evaluateSelectionAndDo: aBlock! !!CompoEditor methodsFor: 'do-its' stamp: 'PetrSpacek 11/22/2013 10:33'!exploreIt	"self evaluateSelectionAndDo: [:result | result explore]"	self inform: 'Not yet implemented'.! !!CompoEditor methodsFor: 'do-its' stamp: 'PetrSpacek 11/22/2013 10:32'!inspectIt	self evaluateSelectionAndDo: [:result | result compoInspect]! !!CompoEditor methodsFor: 'do-its' stamp: 'PetrSpacek 11/25/2013 02:41'!selectionForDoitAsStream	"Answer a ReadStream on the text in the paragraph that is currently selected. "	|compoString smalltalkString|	compoString := self selectionString copy.	smalltalkString := [(Smalltalk at: #CompoToSmalltalk) convert: compoString forWorkspace: true]						on: Error do: [:e | self inform: (e messageText). self error: (e messageText)].	^ ReadWriteStream on: smalltalkString from: 1 to: (smalltalkString size).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoEditor class	instanceVariableNames: ''!!CompoEditor class methodsFor: 'accessing' stamp: 'PetrSpacek 11/22/2013 03:59'!cmdActions 	^ SmalltalkEditor cmdActions .! !!CompoEditor class methodsFor: 'accessing' stamp: 'PetrSpacek 11/22/2013 03:59'!shiftCmdActions 	^SmalltalkEditor shiftCmdActions .! !Object subclass: #CompoBrowser	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!CompoBrowser methodsFor: 'instance creation' stamp: 'Fred 6/23/2014 15:21'!open	| browser compileBlock |	browser := GLMTabulator new.	browser title: (self class title).	browser		row: [:r | r column: #descriptors; column: #details] span: 4;		row: [:r | r column: #code; column: #visual] span: 4.			browser transmit to: #descriptors; andShow: [:a | 		a accordionArrangement.		a title: 'Compo'.		a tree			title: 'Descriptors';			rootsExpanded;			display: [ :compo | compo descriptors. ];			children: [ :desc |				(desc == (Smalltalk at: #Component))					ifTrue: [ |ar|						ar :=  OrderedCollection with: (Smalltalk at: #Descriptor).						ar addAll: (desc subclasses).						ar asArray.					]					ifFalse: [ desc subclasses ]			].		a list			title: 'Interfaces';			display: [ :compo | compo interfaces ].	].		browser transmit to: #details; from: #descriptors; andShow: [:a | 		a title: 'Defines'.		a stackedVerticallyArrangement.		a list			title: 'Port descriptions';			display: [ :desc | (desc isKindOf: (Smalltalk at: #Descriptor)) ifTrue: [ self getPortDescriptionsOfDescriptor: desc ]].		a list			title: 'Architecture';			display: [ :desc | (desc isKindOf: (Smalltalk at: #Descriptor)) ifTrue: [ self getConnectionDescriptionsOfDescriptor: desc ]].		a list			title: 'Services';			display: [ :desc | (desc isKindOf: (Smalltalk at: #Descriptor)) ifTrue: [ self getServicesOfDescriptor: desc ]].	].	browser transmit to: #details; from: #details port: #strongSelection; transformed: [ :x | x compoInspect ].	browser transmit to: #descriptors; from: #descriptors port: #strongSelection; transformed: [ :x | x compoInspect ].	compileBlock :=  [ :x |		|smCode|		smCode := [CompoToSmalltalk convert: x text] on: Error do: [:e | self inform: (e messageText). browser error: (e messageText). ].		Compiler evaluate: (smCode).		browser update.		].	browser transmit to: #code; from: #descriptors; andShow: [:a | 		a text			display: [ :desc | (desc instVarNamed: #code)];			act: compileBlock on: $a entitled: 'Accept';			selectionAct: compileBlock on: $a entitled: 'Accept';			act: compileBlock on: $s.	].	browser transmit to: #visual; from: #descriptors; andShow: [:a | 		a morph			title: [:desc | ('Visualisation of ' , (desc name)) ];			display: [:desc | |sc|					sc := ScrollPane new.					sc layoutPolicy: ProportionalLayout new;						hResizing: #spaceFill;						vResizing: #spaceFill.					sc scroller addMorph: ((CompoComponentMorph on: desc) position: 0@0).					sc yourself ]	].		browser openOn: self. ! !!CompoBrowser methodsFor: 'model' stamp: 'PetrSpacek 11/22/2013 01:02'!descriptors	^ Array with: (Smalltalk at: #Component).! !!CompoBrowser methodsFor: 'model' stamp: 'PetrSpacek 11/22/2013 02:07'!interfaces	^ #('not yet implemented').! !!CompoBrowser methodsFor: 'helpers' stamp: 'PetrSpacek 11/22/2013 02:14'!getConnectionDescriptionsOfDescriptor: desc	|pds res|	"get port to which port-descriptions are connected"		pds := (desc instVarNamed: #ports) at: #architecture.	res := OrderedCollection new.	(((pds instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts)		do: [ :aPort | res add: ((aPort instVarNamed: #owner) instVarNamed: #owner)].	^res asArray.! !!CompoBrowser methodsFor: 'helpers' stamp: 'PetrSpacek 11/22/2013 00:33'!getPortDescriptionsOfDescriptor: desc	|pds res|	"get port to which port-descriptions are connected"		pds := (desc instVarNamed: #ports) at: #ports.	res := OrderedCollection new.	(((pds instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts)		do: [ :aPort | res add: ((aPort instVarNamed: #owner) instVarNamed: #owner)].	^res asArray.! !!CompoBrowser methodsFor: 'helpers' stamp: 'PetrSpacek 11/22/2013 02:14'!getServicesOfDescriptor: desc	|pds res|	"get port to which port-descriptions are connected"		pds := (desc instVarNamed: #ports) at: #services.	res := OrderedCollection new.	(((pds instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts)		do: [ :aPort | res add: ((aPort instVarNamed: #owner) instVarNamed: #owner)].	^res asArray.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoBrowser class	instanceVariableNames: ''!!CompoBrowser class methodsFor: 'instance creation' stamp: 'PetrSpacek 11/21/2013 23:51'!open	^ self new open.! !!CompoBrowser class methodsFor: 'specs' stamp: 'PetrSpacek 11/22/2013 00:12'!title	^ 'Compo Browser'.! !Object subclass: #CompoBrowser2	instanceVariableNames: 'component rawView provsPort reqsPort optionBar newBar copiedCode hasCopiedCode componentShelf'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools'!!CompoBrowser2 commentStamp: '<historical>' prior: 0!A CompoBrowser2 is a browser working like CompoBrowser with Roassal visualization of components.Instance Variables	component:		<ROCompoInternalComponent>	newBar:		<ROElement>	optionBar:		<ROElement>	provsPort:		<ROCompoProvidedPort>	rawView:		<ROView>	reqsPort:		<ROCompoRequiredPort>component	- represents an internal component based on NewComponent descriptor on which is added a newPort provided port. It is used as an optionBar's button.newBar	- is the vertical bar containing New and Run buttons.optionBar	- is the horizontal bar containing subcomponent and ports.provsPort	- is the button that permits to add a new provided port to the visualization.rawView	- is the view containing the visualization.reqsPort	- is the button that permits to add a new required port to the visualization.!!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:29'!componentDescriptor	"Returns the Component's descriptor as a Smalltalk class."	^ Array with: (Smalltalk at: #Component)! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 10/12/2014 18:08'!descriptors	"Returns an array of components' descriptors as Smalltalk classes."	"| temp |	temp := OrderedCollection new.	temp add: (Smalltalk at: #Component).	(Smalltalk at: #Component) subclasses do: [ :subComponent |		temp add: subComponent ].	^ temp"	^ Array with: (Smalltalk at: #Component).! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 2/2/2015 01:33'!initialize	super initialize.	copiedCode := ''.	hasCopiedCode := false! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:33'!interfaces	"Will list the interfaces available."	^ #('not yet implemented').! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 2/3/2015 17:58'!makeComponentShelf	componentShelf := ROElement new.	componentShelf add: (ROCompoTextElement withText: 'Shelf').	"optionBar elements do: [ :e | e center: (e center x)@(optionBar center y) ].	optionBar + (ROBox new color: (Color black veryMuchLighter))"	(self descriptors at: 1) subclasses do: [ :desc |		| roComponent |		roComponent := ROCompoInternalComponent on: desc.		componentShelf add: roComponent	].	ROVerticalLineLayout on: optionBar elements.	componentShelf elements do: [ :e | ROShrikingSize on: e ].! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:34'!makeNewBar	"Builds the vertical option bar containing the New and Run buttons."	| newButton |	newBar := ROElement new.	newButton := ROButtonElement named: 'New' do: [ self newAction ].	newBar add: newButton.	newButton + (ROBox new color: Color white; borderColor: Color black; borderWidth: 1).! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:34'!makeOptionBar	"Builds the vertical option bar containing the new subcomponent and ports buttons."	optionBar := ROElement new.	component := ROCompoInternalComponent asOptionButton.	provsPort := ROCompoProvidedPort asOptionButton.	reqsPort := ROCompoRequiredPort asOptionButton.	optionBar add: component; add: provsPort; add: reqsPort.	optionBar elements do: [ :e | ROShrikingSize on: e ].	ROHorizontalLineLayout on: optionBar elements.	optionBar elements do: [ :e | e center: (e center x)@(optionBar center y) ].	optionBar + (ROBox new color: (Color black veryMuchLighter))! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:35'!newAction	"Executes the action to do when a user click a first time on New."	| newButton runButton comp |	(newBar elements at: 1) remove.	newButton := ROButtonElement named: 'New' do: [ self newAction2 ].	runButton := ROButtonElement named: 'Run' do: [ self runAction ].	newBar add: newButton; add: runButton.	newButton + (ROBox new color: Color yellow; borderColor: Color black; borderWidth: 1).	runButton + (ROBox new color: Color white; borderColor: Color black; borderWidth: 1).	ROVerticalLineLayout on: newBar elements.	comp := (rawView elements at: 1) component model.	rawView allElementsDo: [ :e | e remove ].	rawView add: (ROCompoGraphicEditor onInstanceOf: comp)! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:35'!newAction2	"Executes the action to do when a user click on an already click New button."	| newButton comp |	newBar elements do: [ :e | e remove ].	newButton := ROButtonElement named: 'New' do: [ self newAction ].	newBar add: newButton.	newButton + (ROBox new color: Color white; borderColor: Color black; borderWidth: 1).	comp := (rawView elements at: 1) component model.	rawView allElementsDo: [ :e | e remove ].	rawView add: (ROCompoGraphicEditor on: comp)! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 2/3/2015 18:59'!open	| browser compileBlock copyBlock pasteBlock cutBlock |	browser := GLMTabulator new.	browser title: (self class title).	browser		column: [ :c | c row: #descriptors; row: #code ];		column: #visual span: 2;		column: #shelf span: 0.5.			browser transmit to: #descriptors; andShow: [:a | 		a accordionArrangement.		a title: 'Compo'.		a tree			title: 'Descriptors';			rootsExpanded;			display: [ :compo | compo descriptors. ];			children: [ :desc |				(desc == (Smalltalk  at: #Component))					ifTrue: [ |ar|						ar :=  OrderedCollection with: (Smalltalk at: #Descriptor).						ar addAll: (desc subclasses).						ar asArray.					]					ifFalse: [ desc subclasses ]			].		a list			title: 'Interfaces';			display: [ :compo | compo interfaces ].	].	compileBlock :=  [ :x |		|smCode|		smCode := [CompoToSmalltalk convert: x text] on: Error do: [:e | self inform: (e messageText). browser error: (e messageText). ].		Compiler evaluate: (smCode).		browser update.		].	copyBlock := [ :code |		Clipboard clipboardText:  (code selectedText).	].		pasteBlock := [ :code |					code text: (code text copyReplaceFrom: (code selectionInterval first) to: (code selectionInterval last) with: (Clipboard clipboardText)).					copiedCode := code text.					hasCopiedCode := true.					code update.				].		cutBlock := [ :code |		Clipboard clipboardText:  (code selectedText).		code text: (code text copyReplaceFrom: (code selectionInterval first) to: (code selectionInterval last) with: '').		copiedCode := code text.		hasCopiedCode := true.		code update ].		browser transmit to: #code; from: #descriptors; andShow: [:a | 		a text			display: [ :desc |  				hasCopiedCode 					ifTrue: [ hasCopiedCode := false. copiedCode ]					ifFalse: [ (desc instVarNamed: #code) ]			];			act: compileBlock on: $a entitled: 'Accept';			selectionAct: compileBlock on: $a entitled: 'Accept';			act: compileBlock on: $s;			"AJOUT DE COPIER"			selectionAct: copyBlock on: $c entitled: 'Copy';			"AJOUT DE COLLER"			act: pasteBlock on: $v entitled: 'Paste';			"AJOUT DE COUPER"			selectionAct: cutBlock on: $x entitled: 'Cut'.	].	browser transmit to: #visual; from: #descriptors; andShow: [:a | 		a roassal                         title: [:desc | (desc instVarNamed: #name)];				painting: [:view :desc |					rawView := ROView new. 					rawView @ RODraggable. 										view initializeWithRoassalView: rawView. 					rawView add: (ROCompoGraphicEditor on: desc).					self makeOptionBar.					self makeNewBar.					view stack add: optionBar.					view stack add: newBar.										ROVerticalLineLayout on: (view stack elements).					optionBar width: 3000.					rawView translateBy: (newBar width)@(optionBar height).				]	].		browser transmit to: #shelf;  andShow: [ :a |		a roassal 			title: 'Shelf';			painting: [ :view |				|  raView shelf |				raView := ROView new.				shelf := ROElement new.				view initializeWithRoassalView: raView.				view stack add: raView.				(self descriptors at: 1) subclasses do: [ :desc |					shelf add: (ROCompoInternalComponent asShelfComponentOf: desc).				].				ROVerticalLineLayout on: (shelf elements).				view stack @ ROScrollbable.				raView add: shelf.				"roMorph := ROMorph on: (view stack).				roMorph extent: (view raw encompassingRectangle extent + (40@40)).				pane := ScrollPane new.				pane scroller addMorph: roMorph."			]	].	browser openOn: self. ! !!CompoBrowser2 methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:36'!runAction	"Executes the action to do when a user click on Run. Tries to invoke the main() service of a component. The error isn't caught."	|  compo |	compo := (rawView elements at: 1) component model newC.	(compo instVarNamed: #owner) cs__main.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompoBrowser2 class	instanceVariableNames: ''!!CompoBrowser2 class methodsFor: 'as yet unclassified' stamp: 'Fred 6/20/2014 15:02'!open	^ self new open.! !!CompoBrowser2 class methodsFor: 'as yet unclassified' stamp: 'Fred 10/12/2014 18:37'!title	^ 'Compo Browser'.! !