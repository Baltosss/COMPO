ROElement subclass: #ROCompoAbstractInteractiveElement	instanceVariableNames: 'selection hasMenu isInOptionBar astNode isModifiable isLinkable isInstance'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoAbstractInteractiveElement commentStamp: '<historical>' prior: 0!A ROCompoAbstractInteractiveElement is a ROElement on which can be applied browser's interactions like drag & drop or right click.Instance Variables	astNode: <CompoDescriptorNode>	hasMenu:	<Boolean>	isInOptionBar:	<Boolean>	isInstance: <Boolean>	isLinkable: <Boolean>	isModifiable: <Boolean>	selection:	<ROSelection>	astNode 	- represents the AST node of the current elementhasMenu	- is true if the element must have a right click menu interaction.isInOptionBar	- is true if the element is displayed in the browser's <CompoBrowser2> option bar.isInstance 	- is true if the element represents an instance of a component/port.isLinkable 	- is true if the element allows port connection interactions.isModifiable	- is true if the element allows modifications like adding subcomponents or ports.		selection	- selection of available elements that the current element can be dropped on.!!ROCompoAbstractInteractiveElement methodsFor: 'drawing' stamp: 'Fred 7/31/2014 09:56'!changeToSelectedColor	"change the color of the current element to default selection color."	(self getShape: ROBox) color: (self defaultSelectionColor).! !!ROCompoAbstractInteractiveElement methodsFor: 'actions' stamp: 'Fred 7/31/2014 09:51'!addAction	"Action that the current element must do if the add component option in right click menu is chosen"	self subclassResponsibility ! !!ROCompoAbstractInteractiveElement methodsFor: 'actions' stamp: 'Fred 7/31/2014 09:56'!gotoAction	"Action that the current element must do if the go to... option in right click menu is chosen"	self subclassResponsibility ! !!ROCompoAbstractInteractiveElement methodsFor: 'actions' stamp: 'Fred 7/31/2014 09:49'!removeAction	"Action that the current element must do if the remove option in right click menu is chosen"	self subclassResponsibility ! !!ROCompoAbstractInteractiveElement methodsFor: 'actions' stamp: 'Fred 7/31/2014 09:50'!renameAction	"Action that the current element must do if the rename option in right click menu is chosen"	self subclassResponsibility ! !!ROCompoAbstractInteractiveElement methodsFor: 'interaction' stamp: 'Fred 10/12/2014 16:17'!buildInteractions	"Used in instance initialization. It adds to the current element the interactions it must have."	self buildMouseDraggingHandler.	self buildMouseDraggedHandler.	hasMenu ifTrue: [ 		self @ (ROMenuActivable new 			item: 'Add component' action: [ self addAction ];			item: 'Go to...' action: [ self gotoAction ];			item: 'Remove' action: [self removeAction]; 			item: 'Rename' action: [self renameAction])	]! !!ROCompoAbstractInteractiveElement methodsFor: 'interaction' stamp: 'Fred 7/31/2014 09:53'!buildMouseDraggedHandler	"Defines the action the current element must do after a drag & drop. By default the element does nothing."! !!ROCompoAbstractInteractiveElement methodsFor: 'interaction' stamp: 'Fred 7/31/2014 09:54'!buildMouseDraggingHandler	"Defines the action the current element must do during a drag & dropattributes . By default the available elements to be dropped on are highlighted."	self on: ROMouseDragging do: [ :event |		event element changeToSelectedColor.		isInOptionBar ifTrue: [ 			self view firstView allElementsDo: [ :candidateTarget |				selection source: self target: candidateTarget.			].		] ifFalse: [ 			self view allElementsDo: [ :candidateTarget |				selection source: self target: candidateTarget.			].		].		view signalUpdate	]! !!ROCompoAbstractInteractiveElement methodsFor: 'interaction' stamp: 'Fred 7/31/2014 09:55'!buildSelection	"Set selection with new conditions of selection. By default nothing is selected."	selection := ROSelection new 		for: [ :source :target | false ];		onInclusion: [ :element | ];		onExclusion: [ :element | ].! !!ROCompoAbstractInteractiveElement methodsFor: 'initialization' stamp: 'Fred 7/31/2014 11:15'!initialize 	super initialize.	hasMenu := isModifiable := isLinkable := true.	isInOptionBar := isInstance := false.	self + (ROBox new color: (self defaultColor)).	self buildSelection.	self buildInteractions ! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 09:41'!astNode	"Used for code generation. Returns the node that defines the current element in source code"	self subclassResponsibility ! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 09:42'!astNode: anAstNode	"Used for code generation. Set the node that defines the current element in source code"	self subclassResponsibility ! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 09:42'!defaultColor	"Default background color of elements"	^Color transparent! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 09:44'!defaultSelectionColor	"Default highlighting color during a drag & drop for possible target elements"	^Color yellow! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 09:45'!hasMenu	^hasMenu! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/17/2014 17:08'!hasMenu: aBoolean	hasMenu == aBoolean ifFalse: [		hasMenu := aBoolean. 		self allElementsDo: [ :e | 			(e isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [ e hasMenu:  aBoolean ]		].		hasMenu 			ifTrue: [ self buildInteractions ]			ifFalse: [ self removeInteraction: ROMenuActivable ] 	]! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:55'!isInOptionBar	(parent isKindOf: ROCompoAbstractInteractiveElement) 		ifTrue: [ ^ parent isInOptionBar ]		ifFalse: [ ^ isInOptionBar ]! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:17'!isInOptionBar: aBoolean	isInOptionBar := aBoolean.	self allElementsDo: [ :e |		(e isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [ e isInOptionBar: aBoolean ] 	]! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:09'!isInstance	^isInstance! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:14'!isInstance: aBoolean	isInstance := aBoolean.	self allElementsDo: [ :e |		(e isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [ e isLinkable: aBoolean ] 	]! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:45'!isLinkable	"returns true if the component or subcomponent that contains the current element is linkable. A linkable element allows port connection interactions."	(parent isKindOf: ROCompoAbstractInteractiveElement) 		ifTrue: [ ^ parent isLinkable ] 		ifFalse: [ ^ isLinkable ]		! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:11'!isLinkable: aBoolean	isLinkable := aBoolean.	self allElementsDo: [ :e |		(e isKindOf: ROCompoAbstractInteractiveElement) ifTrue:[ e isLinkable: aBoolean ]	]! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:46'!isModifiable	(parent isKindOf: ROCompoAbstractInteractiveElement) 		ifTrue: [ ^ parent isModifiable ] 		ifFalse: [ ^ isModifiable ]! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/31/2014 11:39'!isModifiable: aBoolean	isModifiable := aBoolean.	self allElementsDo: [ :e |		(e isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [ e isModifiable: aBoolean ] 	]! !!ROCompoAbstractInteractiveElement methodsFor: 'accessing' stamp: 'Fred 7/10/2014 15:51'!selection	^selection! !ROCompoAbstractInteractiveElement subclass: #ROCompoAbstractComponent	instanceVariableNames: 'provsPorts reqsPorts label provsContainer internalContainer reqsContainer borderElement labelElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoAbstractComponent commentStamp: '<historical>' prior: 0!A ROCompoAbstractComponent is a ROElement that displays a component or a subcomponent.Instance Variables	borderElement:		<ROElement>	internalContainer:		<ROCompoInternalContainer>	label:		<String>	labelElement:		<ROCompoTextElement>	model:		<Component>	provsContainer:		<ROCompoProvsContainer>	provsPorts:		<Array<PortDescription>>	reqsContainer:		<ROCompoReqsContainer>	reqsPorts:		<Array<PortDescription>>borderElement	- ROElement that displays the component/subcomponent border.internalContainer	- contains all internal elements like the name of the component and its subcomponent.label	- represents the name displayed of the component.labelElement	- ROElement displaying the name of the componentmodel	- component's Descriptor described by the current elementprovsContainer	- contains all elements displayed on the left side of the component like provided ports or internally required ports.provsPorts	- contains all provided ports' descriptors of the component.reqsContainer	- contains all elements displayed on the right side of the component like required ports.reqsPorts	- contains all required ports' descriptors of the component.!!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/16/2014 13:59'!astNode	^ astNode! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/16/2014 14:00'!astNode: anAstNode 	astNode := anAstNode! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/8/2014 14:36'!getPortDescriptions	^ self getPortDescriptionsContainedIn: model! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 2/3/2015 17:54'!getPortDescriptionsContainedIn: aComponentDescriptor	"get port to which port-descriptions are connected"	|pds res|	res := OrderedCollection new.	pds := (aComponentDescriptor instVarNamed: #ports) .	pds isNil ifTrue: [ ^res ].	pds := pds at: #ports.		(((pds instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts)		do: [ :aPort | res add: ((aPort instVarNamed: #owner) instVarNamed: #owner)].	^res asArray.! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/7/2014 11:02'!internalContainer	^internalContainer! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/31/2014 11:48'!isLinkable	^isLinkable! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/16/2014 17:03'!isLinkable: aBoolean	isLinkable:= aBoolean! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/31/2014 11:47'!isModifiable	^ isModifiable! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/7/2014 10:58'!label	^label! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/7/2014 10:58'!label: aString	label := aString! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 6/26/2014 14:17'!model	^model! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/7/2014 11:02'!provsContainer	^provsContainer! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 6/26/2014 14:17'!provsPorts	^ provsPorts! !!ROCompoAbstractComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/7/2014 11:02'!reqsContainer	^reqsContainer! !!ROCompoAbstractComponent methodsFor: 'drawing' stamp: 'Fred 2/3/2015 18:41'!buildContainers	"Method that create all elements to display."	provsContainer := ROCompoProvsContainer new. 	internalContainer := ROCompoInternalContainer new.	reqsContainer := ROCompoReqsContainer new.	borderElement := ROElement new.		"Creation of the border of the element and its title."	"borderElement + (ROBorder new strokeWidth:  3). "	borderElement + (ROBox new borderWidth: 3; color: Color white).	labelElement := ROCompoTextElement withText: (label asByteArray asStringOrText).	(labelElement getShape: ROBox) borderWidth: 0.	self add: borderElement.	self add: provsContainer; add: internalContainer; add: reqsContainer.	internalContainer add: labelElement.		"Creation of subelements and computation of their position."	self buildInternalStructure.	ROVerticalLineLayout on: reqsContainer elements.	ROVerticalLineLayout on: internalContainer elements.	ROVerticalLineLayout on: provsContainer elements.	ROHorizontalLineLayout on: (Array with: provsContainer with: internalContainer with: reqsContainer).	1 to: 2 by: 1 do: [ :i | 		provsContainer elements do: [ :e | e centerX: (provsContainer width / 2) ].		reqsContainer elements do: [ :e | e centerX: (reqsContainer width / 2) ].	].		"Used for subcomponents. Reduce the size of the component if it's an option bar button."	isInOptionBar 		ifTrue: [ 			(provsContainer height >= reqsContainer height) 				ifTrue: [borderElement height: (provsContainer height)]				ifFalse: [ borderElement height: (reqsContainer height)] 		] 		ifFalse: [ 			borderElement height: (self height).			(Array with: provsContainer with: internalContainer with: reqsContainer) do: [ :e | e resize ]		].	borderElement width: ((labelElement width)+20+(1/2*(provsContainer width + (reqsContainer width))) asInteger).	borderElement translateTo: (provsContainer center x)@(borderElement position y).		"Draw the links between ports."	self buildEdges.		self elements do: [ :e | e forward. ].! !!ROCompoAbstractComponent methodsFor: 'drawing' stamp: 'Fred 10/12/2014 16:26'!buildInternalStructure	self subclassResponsibility ! !!ROCompoAbstractComponent methodsFor: 'drawing' stamp: 'Fred 7/31/2014 14:26'!resize	"recompute borderElement and the subelements' position and size"	ROHorizontalLineLayout on: (Array with: provsContainer with: internalContainer with: reqsContainer).	borderElement setBounds: (((provsContainer position x) + (provsContainer width / 2))@(borderElement position y) extent: (((reqsContainer position x) + (reqsContainer width / 2)) - ((provsContainer position x) + (provsContainer width / 2)))@(self height)).	(self parent isKindOf: ROCompoAbstractContainer) ifTrue: [ self parent resize ]	! !!ROCompoAbstractComponent methodsFor: 'actions' stamp: 'Fred 7/29/2014 15:47'!renameAction	| textEntry textDisplay |	textDisplay := 'Rename the component ', label, ' as : '.	textEntry := CommandLineUIManager default textEntry: textDisplay title: 'Rename' entryText: label.	textEntry isNil ifFalse: [ 		textEntry asByteArray asStringOrText.		((textEntry first isUppercase) & (textEntry isLiteral) & (textEntry lastSpacePosition == 0)) ifTrue: [ 			label := textEntry.			(labelElement getShape: ROLabel) text: label.			self resize.			view signalUpdate		].	] ! !ROCompoAbstractComponent subclass: #ROCompoInternalComponent	instanceVariableNames: 'connectedPortLabel connectedPortElement isInstanciated compositeInstancePort'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoInternalComponent commentStamp: '<historical>' prior: 0!A ROCompoInternalComponent is a ROElement describing a subcomponent of a composite. Its subcomponents aren't displayed.Instance Variables	compositeInstancePort:		<ROCompoRequiredPort>	connectedPortElement:		<ROCompoProvidedPort>	connectedPortLabel:		<String>	isInstanciated:		<Boolean>compositeInstancePort	- Used in code generation algorithm. Is the port of the composite that contains the subcomponent (self model) from which the subcomponent is instanciated in the composite's architecture part.connectedPortElement	- represents the current component's port connected to the composite.connectedPortLabel	- is the name of the connectedPortElement.isInstanciated	- used in code generation algorithm. Is true if the subcomponent is already instanciated in the architecture part.!!ROCompoInternalComponent methodsFor: 'interaction' stamp: 'Fred 7/16/2014 15:43'!buildMouseDraggedHandler 	self on: ROMouseDragged do: [ :event |		| targetElement |		targetElement := (self view elementAtRealPosition: event position).		(targetElement isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [			(self selection contains: targetElement) ifTrue: [ 				targetElement add: (ROCompoInternalComponent on: model byPort: connectedPortLabel).				targetElement resize.				targetElement buildEdges.			]		].		(self shapes at: 1) color: Color transparent.		selection clear. 		view signalUpdate.	].! !!ROCompoInternalComponent methodsFor: 'interaction' stamp: 'Fred 7/16/2014 15:37'!buildSelection	selection := ROSelection new 		for: [ :source :target | 			(target isKindOf: ROCompoInternalContainer) & (target parent isKindOf: ROCompoComponent) 				ifTrue: [ target isModifiable ] 				ifFalse: [ false ]		];		onInclusion: [ :element | (element shapes at: 1) color: Color green];		onExclusion: [ :element | (element shapes at: 1) color: Color transparent].! !!ROCompoInternalComponent methodsFor: 'initialization' stamp: 'Fred 7/11/2014 11:44'!initialize	super initialize.! !!ROCompoInternalComponent methodsFor: 'initialization' stamp: 'Fred 7/31/2014 15:12'!modelChanged 	"Check ROCompoComponent>>modelChanged for further informations."	provsPorts := OrderedCollection new.	reqsPorts := OrderedCollection new.		label := model name.	isInstance ifTrue: [ label := label, ' *' ].		self getPortDescriptions do: [:desc |		|role visibility|		role := ((((((desc instVarNamed: #ports) at: #role) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		visibility := ((((((desc instVarNamed: #ports) at: #visibility) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		((role = #required) and: [ visibility = #external ])			ifTrue: [ reqsPorts add: desc ].		((role = #provided) and: [ visibility = #external ])			ifTrue: [ provsPorts add: desc ].	].	self buildContainers.! !!ROCompoInternalComponent methodsFor: 'drawing' stamp: 'Fred 7/3/2014 16:05'!buildEdges	provsContainer elements do: [ :e | e buildEdges ]. 	reqsContainer  elements do: [ :e | e buildEdges ]! !!ROCompoInternalComponent methodsFor: 'drawing' stamp: 'Fred 10/12/2014 17:39'!buildInternalStructure	"Check ROCompoComponent>>buildInternalStructure for further informations. This method doesn't introspect on internally required ports nor the subcomponents."	| portElem |	isInstance ifTrue: [ "Even with a lot of instructions written 2 times, this reduces the number of tests"		provsPorts do: [ :port | 			portElem := ROCompoProvidedPort asInstanceOf: port.			portElem label = (connectedPortLabel, ' *') ifTrue:[ connectedPortElement := portElem].			provsContainer add: portElem		].		(connectedPortElement isNil) & (connectedPortLabel isNil not) ifTrue:[			connectedPortElement := ROCompoProvidedPort asInstanceLabelled: connectedPortLabel.			provsContainer add: connectedPortElement		].		reqsPorts do: [ :port | reqsContainer add: (ROCompoRequiredPort asInstanceOf: port) ]	] ifFalse: [ 		provsPorts do: [ :port | 			portElem := ROCompoProvidedPort on: port.			portElem label = connectedPortLabel ifTrue:[ connectedPortElement := portElem].			provsContainer add: portElem		].		(connectedPortElement isNil) & (connectedPortLabel isNil not) ifTrue:[			connectedPortElement := ROCompoProvidedPort labelled: connectedPortLabel.			provsContainer add: connectedPortElement		].		reqsPorts do: [ :port | reqsContainer add: (ROCompoRequiredPort on: port) ] 	]! !!ROCompoInternalComponent methodsFor: 'actions' stamp: 'Fred 7/16/2014 11:29'!addAction	parent addAction.! !!ROCompoInternalComponent methodsFor: 'actions' stamp: 'Fred 7/16/2014 13:43'!gotoAction 	view allElementsDo: [ :e | 		e remove. 	].	view add: (ROCompoGraphicEditor on: (Smalltalk at: (label asSymbol))).	view signalUpdate.! !!ROCompoInternalComponent methodsFor: 'actions' stamp: 'Fred 7/28/2014 16:19'!removeAction	self allElementsDo: [ :e |		(e isKindOf: ROCompoAbstractPort) ifTrue: [ e removeAction ].	].	self remove.	parent view signalUpdate! !!ROCompoInternalComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/17/2014 16:05'!compositeInstancePort	^compositeInstancePort! !!ROCompoInternalComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/17/2014 16:08'!compositeInstancePort: aROCompoRequiredPort"compositeInstancePort is the port of the composite that contains the subcomponent (self model) from which the subcomponent is instanciated in the composite's architecture part."	^compositeInstancePort! !!ROCompoInternalComponent methodsFor: 'accessing-computed' stamp: 'Fred 6/26/2014 15:04'!connectedPortElement	^connectedPortElement! !!ROCompoInternalComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/17/2014 16:05'!isInstanciated	^isInstanciated ! !!ROCompoInternalComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/17/2014 16:05'!isInstanciated: aBoolean	isInstanciated := aBoolean! !!ROCompoInternalComponent methodsFor: 'accessing-computed' stamp: 'Fred 6/26/2014 14:09'!model: aComponentDescriptor connectedBy: aPortName	model := aComponentDescriptor.	connectedPortLabel:= aPortName.	! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoInternalComponent class	instanceVariableNames: ''!!ROCompoInternalComponent class methodsFor: 'as yet unclassified' stamp: 'Fred 10/12/2014 12:38'!asInstanceOf: aComponentDescriptor byPort: portName	| inst |	inst := self new.	inst model: aComponentDescriptor connectedBy: portName.	inst 		isLinkable: false; 		hasMenu: false; 		isModifiable: false;		isInstance: true;		isInOptionBar: false; 		modelChanged.	^inst! !!ROCompoInternalComponent class methodsFor: 'as yet unclassified' stamp: 'Fred 7/25/2014 11:23'!asOptionButton	| inst |	inst:= self new.	inst 		model: NewComponent connectedBy: 'newPort';		isLinkable: false; 		isModifiable: false; 		hasMenu: false; 		isInOptionBar: true;		modelChanged; 		buildEdges.	^ inst! !!ROCompoInternalComponent class methodsFor: 'as yet unclassified' stamp: 'Fred 2/3/2015 18:36'!asShelfComponentOf: aComponentDescriptor	| inst |	inst:= self new.	inst 		model: aComponentDescriptor connectedBy: 'newPort';		isLinkable: false; 		isModifiable: false; 		hasMenu: false; 		isInOptionBar: true;		modelChanged; 		buildEdges.	^ inst! !!ROCompoInternalComponent class methodsFor: 'as yet unclassified' stamp: 'Fred 6/26/2014 14:10'!on: aComponentDescriptor byPort: portName	| inst |	inst:= self new.	inst model: aComponentDescriptor connectedBy: portName.	inst modelChanged.	^ inst! !ROCompoAbstractInteractiveElement subclass: #ROCompoAbstractPort	instanceVariableNames: 'model label textElement symbolElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoAbstractPort commentStamp: '<historical>' prior: 0!A ROCompoAbstractPort is a ROElement that represents a port.Instance Variables	label:		<String>	model:		<Descriptor>	symbolElement:		<ROCompoAbstractPortSymbol>	textElement:		<ROCompoTextElement>label	- is the name of the port.model	- is the descriptor of the port.symbolElement	- is the symbol of the port to display (the connection node).textElement	- is the ROElement that displays the name of the port.!!ROCompoAbstractPort methodsFor: 'initialization' stamp: 'Fred 7/31/2014 11:40'!modelChanged 	label :=  ((((((model instVarNamed: #ports) at: #name) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.	isInstance ifTrue: [ label := label, ' *'].! !!ROCompoAbstractPort methodsFor: 'drawing' stamp: 'Fred 7/31/2014 15:14'!buildEdges	self allElementsDo: [ :e |		(e isKindOf: ROEdge) ifTrue: [ e remove ]	]. "Roassal's removeEdges methods don't work properly. It is advised to use your own algorithm to remove them."! !!ROCompoAbstractPort methodsFor: 'drawing' stamp: 'Fred 7/31/2014 15:16'!draw	"Builds the elements to display."	self allElementsDo: [ :e |		e remove.	].	self shapes do: [ :s |		self removeShape: (s class) 	].	self + (ROBox new color: self defaultColor).	textElement := ROCompoTextElement withText: (label asByteArray asStringOrText)! !!ROCompoAbstractPort methodsFor: 'actions' stamp: 'Fred 7/16/2014 11:30'!addAction 	parent addAction ! !!ROCompoAbstractPort methodsFor: 'actions' stamp: 'Fred 7/16/2014 13:47'!gotoAction	parent gotoAction! !!ROCompoAbstractPort methodsFor: 'actions' stamp: 'Fred 7/29/2014 15:51'!removeAction 	symbolElement removeAct.	self allElementsDo: [ :e |		e remove. ].	self remove.	view signalUpdate.! !!ROCompoAbstractPort methodsFor: 'actions' stamp: 'Fred 7/29/2014 15:52'!renameAction	| textEntry textDisplay |	textDisplay := 'Rename the port ', label, ' as : '.	textEntry := CommandLineUIManager default textEntry: textDisplay title: 'Rename' entryText: label.	textEntry isNil ifFalse: [ 		textEntry asByteArray asStringOrText.		((textEntry first isLowercase) & (textEntry isLiteral) & (textEntry lastSpacePosition == 0)) ifTrue: [ 			label := textEntry.			self draw.			self buildEdges.			view signalUpdate		].	]! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 7/17/2014 16:30'!astNode 	self halt.	(parent isKindOf: ROCompoAbstractInteractiveElement) 		ifTrue: [ ^parent astNode ]		ifFalse: [ ^nil ].	! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 7/16/2014 14:01'!astNode: anAstNode	parent astNode: anAstNode ! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 7/31/2014 15:15'!centerX: aNumber	"recompute positions of subelements to put the textElement's center at aNumber in the x axis in parent's orthonormal."	| intervalX centerInContainerOrthonormal |	centerInContainerOrthonormal := textElement width / 2 + textElement position x + self position x.	intervalX := aNumber - centerInContainerOrthonormal.	self setBounds: ((self position x + intervalX)@(self position y) extent: (self width)@(self height)).! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/26/2014 10:42'!label	^ label.! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/26/2014 10:42'!label: aString	label:=aString.! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/25/2014 16:30'!model 	^model! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/25/2014 16:31'!model: aPortDescriptor 	model:=aPortDescriptor! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/25/2014 16:32'!symbolElement	^symbolElement ! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/25/2014 16:32'!symbolElement: aROElement 	symbolElement := aROElement! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/25/2014 16:31'!textElement	^textElement! !!ROCompoAbstractPort methodsFor: 'accessing' stamp: 'Fred 6/25/2014 16:31'!textElement: aROElement	textElement := aROElement! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoAbstractPort class	instanceVariableNames: ''!!ROCompoAbstractPort class methodsFor: 'as yet unclassified' stamp: 'Fred 10/12/2014 12:40'!asInstanceLabelled: aString	| inst |	inst:= self new.	inst label: (aString, ' *').	inst 		isLinkable: false; 		hasMenu: false; 		isModifiable: false;		isInstance: true;		isInOptionBar: false"; 		modelChanged".	inst draw.	^ inst.! !!ROCompoAbstractPort class methodsFor: 'as yet unclassified' stamp: 'Fred 10/12/2014 12:40'!asInstanceOf: aPortDescriptor	| inst |	inst:= self new.	inst model: aPortDescriptor.	inst 		isLinkable: false; 		hasMenu: false; 		isModifiable: false;		isInstance: true;		isInOptionBar: false; 		modelChanged.	inst modelChanged.	inst draw.	^ inst.! !!ROCompoAbstractPort class methodsFor: 'as yet unclassified' stamp: 'Fred 7/25/2014 11:36'!asOptionButton	| inst |	inst:= self new.	inst label: 'newPort'.	inst 		isLinkable: false; 		hasMenu: false; 		isInOptionBar: true; 		draw; 		buildEdges.	^ inst.! !!ROCompoAbstractPort class methodsFor: 'as yet unclassified' stamp: 'Fred 7/15/2014 11:59'!labelled: aString	| inst |	inst:= self new.	inst label: aString.	inst draw.	^ inst.! !!ROCompoAbstractPort class methodsFor: 'as yet unclassified' stamp: 'Fred 7/15/2014 11:59'!on: aPortDescriptor	| inst |	inst:= self new.	inst model: aPortDescriptor.	inst modelChanged.	inst draw.	^ inst.! !ROCompoAbstractPort subclass: #ROCompoRequiredPort	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoRequiredPort commentStamp: '<historical>' prior: 0!A ROCompoRequiredPort is a ROElement that represents a required port or an internal required port.Instance Variables!!ROCompoRequiredPort methodsFor: 'interaction' stamp: 'Fred 7/17/2014 16:41'!buildMouseDraggedHandler 	self on: ROMouseDragged do: [ :event |		| targetElement |		targetElement := (self view elementAtRealPosition: event position).		(targetElement isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [			(selection contains: targetElement) ifTrue: 			[ 				| newPort |				newPort := ROCompoRequiredPort labelled: (self label).				targetElement add: newPort.				targetElement resize. 				targetElement buildEdges.				view signalUpdate.				"(targetElement isKindOf: ROCompoProvsContainer) 					ifTrue: [ newPort addInternalPortToAst ]					ifFalse: [ newPort addExternalPortToAst ]"			] 		].		(self shapes at: 1) color: Color transparent.		selection clear. 		view signalUpdate	]! !!ROCompoRequiredPort methodsFor: 'interaction' stamp: 'Fred 7/16/2014 13:34'!buildSelection	selection := ROSelection new 		for: [ :source :target | 			(target isKindOf: ROCompoReqsContainer) | (target isKindOf: ROCompoProvsContainer) 				ifTrue: [ target isModifiable ] 				ifFalse: [ false ]		];		onInclusion: [ :element | (element shapes at: 1) color: Color green];		onExclusion: [ :element | (element shapes at: 1) color: Color transparent ].! !!ROCompoRequiredPort methodsFor: 'drawing' stamp: 'Fred 10/12/2014 16:05'!buildEdges	| link |	super buildEdges.	symbolElement connectedSymbol removeInteraction: RODynamicEdge.	symbolElement isConnected ifTrue: [ 		link := ROEdge from: (symbolElement connectedSymbol) to: (symbolElement connectedElement connectedSymbol).		"link + (ROOrthoVerticalLineShape new color: Color black)."		link + (RORadialBezierCurve new color: (Color green alpha: 0.1); width: 3).		symbolElement connectedSymbol @ (RODynamicEdge new toAll: (Array with: symbolElement connectedElement connectedSymbol) using: (RORadialBezierCurve new color: (Color red alpha: 0.5); width: 3)).		self add: link	] ifFalse: [ 		link := ROEdge from: textElement to: (symbolElement connectedSymbol).		link + (ROLine new color: Color black).		self add: link 	]! !!ROCompoRequiredPort methodsFor: 'drawing' stamp: 'Fred 10/12/2014 16:07'!draw 	| translation |	super draw.	symbolElement := ROCompoRequiredPortSymbol sized: (textElement height).	isInOptionBar ifTrue: [ symbolElement isInOptionBar: true ].	symbolElement draw.	self add: textElement; add: symbolElement.	ROHorizontalLineLayout on: self elements.	symbolElement center: (symbolElement center x)@(textElement center y).	translation := ((self center x) - (textElement center x))@0.	symbolElement translateBy: translation.	textElement center: (self center x)@(textElement center y).! !!ROCompoRequiredPort methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:20'!addExternalPortToAst	"Used in code generation. Adds a new node to the AST."	| node portNode |	"node := (self astNode body at: 1) ports. "	node := OrderedCollection new.	node addAll: ((self astNode body at: 3) ports).	portNode := CompoPortNode new. "portNode := GraphicCompoPortNode"	portNode 		parent: node;		comments: nil;		pName: (self label); 		pInterface: '*';		pKind: nil;		pIsCollectionPort: false;		pInjection: nil.	node add: portNode.	(self astNode body at: 1) ports: (node asArray).! !!ROCompoRequiredPort methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:21'!addInternalPortToAst	"Used in code generation. Adds a new node to the AST."	| node portNode |	"node := (self astNode body at: 1) ports. "	node := OrderedCollection new.	node addAll: ((self astNode body at: 2) ports).	portNode := CompoPortNode new. "portNode := GraphicCompoPortNode"	portNode 		parent: node;		comments: nil;		pName: (self label); 		pInterface: '*';		pKind: nil;		pIsCollectionPort: false;		pInjection: nil.	node add: portNode.	(self astNode body at: 2) ports: (node asArray).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoRequiredPort class	instanceVariableNames: ''!!ROCompoRequiredPort class methodsFor: 'as yet unclassified' stamp: 'Fred 7/25/2014 11:38'!asOptionButton	| inst |	inst := super asOptionButton.	inst label: 'provided'.	^ inst.! !ROCompoAbstractComponent subclass: #ROCompoComponent	instanceVariableNames: 'intReqsPorts intProvsPorts'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoComponent commentStamp: '<historical>' prior: 0!A ROCompoComponent is a ROElement describing a main component. If the component is a composite, the subcomponents are displayed.Instance Variables	intProvsPorts:		<Array<PortDescription>>	intReqsPorts:		<Array<PortDescription>>intProvsPorts	- contains the internal provided ports of the component. Currently that variable is useless because there is no internal provided port.intReqsPorts	- contains the internal required ports of the component.!!ROCompoComponent methodsFor: 'interaction' stamp: 'Fred 7/10/2014 16:27'!buildMouseDraggingHandler 	! !!ROCompoComponent methodsFor: 'drawing' stamp: 'Fred 7/31/2014 14:32'!buildEdges	"Draws links between ports."	provsContainer elements do: [ :e | e buildEdges ]. 	reqsContainer  elements do: [ :e | e buildEdges ].	internalContainer elements do: [ :e |		(e isKindOf: ROCompoInternalComponent) ifTrue: [ 			e buildEdges ] ]! !!ROCompoComponent methodsFor: 'drawing' stamp: 'Fred 2/3/2015 17:57'!buildInternalStructure	"Adds to the component its internal structure as ports, and subcomponents. Read the Architecture part to prepare connections to display."	| connections matcher |	connections := OrderedCollection new.	matcher := RxMatcher forString: '\([ ]*([a-zA-Z0-9]+).new\(\)[ ]*\)'.	"Adds the ports to the current element."	isInstance ifTrue: [ 		intReqsPorts do: [ :port | provsContainer add: (ROCompoRequiredPort asInstanceOf: port) ].		provsPorts do: [ :port | provsContainer add: (ROCompoProvidedPort asInstanceOf: port) ].		reqsPorts do: [ :port | reqsContainer add: (ROCompoRequiredPort asInstanceOf: port) ].		intProvsPorts do: [ :port | provsContainer add: (ROCompoProvidedPort asInstanceOf: port) ]	] ifFalse: [ 		intReqsPorts do: [ :port | provsContainer add: (ROCompoRequiredPort on: port) ].		provsPorts do: [ :port | provsContainer add: (ROCompoProvidedPort on: port) ].		reqsPorts do: [ :port | reqsContainer add: (ROCompoRequiredPort on: port) ].		intProvsPorts do: [ :port | provsContainer add: (ROCompoProvidedPort on: port) ]	].	"Adds connections described in ConnectionDescriptions"	(model instVarNamed: #ports) isNil ifTrue: [ ^ self ].	(((((model instVarNamed: #ports) at: #architecture) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) do: [ :connection |		| connectionDescription sourceComponent destComponent sourcePort destPort roSourceComp roDestComp roSourcePort roDestPort |		connectionDescription := ((connection instVarNamed: #owner) instVarNamed: #owner) instVarNamed: #ports.		sourceComponent := (((((connectionDescription at: #sourceComponent) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		destComponent := (((((connectionDescription at: #destinationComponent) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		sourcePort := (((((connectionDescription at: #sourcePort) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		destPort := (((((connectionDescription at: #destinationPort) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.				"source computation"		sourceComponent = 'self' ifTrue: [ "if the source is the composite"			roSourceComp := self.			provsContainer elements do: [ :elem |				(elem isKindOf: ROCompoRequiredPort) ifTrue: [					isInstance ifTrue: [ 						(elem label = (sourcePort, ' *')) ifTrue: [ roSourcePort := elem ]					] ifFalse: [ 						(elem label = sourcePort) ifTrue: [ roSourcePort := elem ]					]				]			].			roSourcePort isNil ifTrue: [ 				reqsContainer elements do: [ :elem |					(elem isKindOf: ROCompoRequiredPort) ifTrue: [ 						isInstance ifTrue: [ 							(elem label = (sourcePort, ' *')) ifTrue: [ roSourcePort := elem ]						] ifFalse: [ 							((elem label = sourcePort)) ifTrue: [ roSourcePort := elem ]						]					]				]			]		] ifFalse: [			(matcher matches: sourceComponent) ifTrue: [ "if the source is a new instance of a component"				| compName |				compName := matcher subexpression: 2.				isInstance ifTrue: [ 									roSourceComp := ROCompoInternalComponent asInstanceOf: (Smalltalk at: (compName asSymbol)) byPort: sourcePort.				] ifFalse: [ 					roSourceComp := ROCompoInternalComponent on: (Smalltalk at: (compName asSymbol)) byPort: sourcePort.				].				roSourceComp isModifiable: false.				roSourcePort := roSourceComp connectedPortElement.				internalContainer add: roSourceComp.				isInstance ifTrue: [self halt].			] ifFalse: [ "if the source is subcomponent already identified by a composite's internal required port"				connections do: [ :c |					((c at: 1) = 'self') & ((c at: 2) = sourceComponent) ifTrue: [ 						roSourceComp := c at: 3.						roSourceComp reqsContainer elements do: [ :e |							isInstance ifTrue: [  								e label = (sourcePort, ' *') ifTrue: [ roSourcePort := e ]							] ifFalse: [ 								e label = sourcePort ifTrue: [ roSourcePort := e ] 							]						]					] 				]			]		].		"target computation"		destComponent = 'self' ifTrue: [ "if the target component is the composite"			roDestComp := self.			provsContainer elements do: [ :elem | 				(elem isKindOf: ROCompoProvidedPort) ifTrue: [					isInstance ifTrue: [  						elem label = (destPort, ' *') ifTrue: [ roDestPort := elem ]					] ifFalse: [						elem label = destPort ifTrue: [ roDestPort := elem ]					]				]			]		 		] ifFalse: [ 			(matcher matches: destComponent) ifTrue: [ "if the target component is a new instance of a component"				| compName |				compName := matcher subexpression: 2.				isInstance ifTrue: [ 					roDestComp := ROCompoInternalComponent asInstanceOf: (Smalltalk at: (compName asSymbol)) byPort: destPort.				] ifFalse: [ 					roDestComp := ROCompoInternalComponent on: (Smalltalk at: (compName asSymbol)) byPort: destPort.				].				roDestComp isModifiable: false.				roDestPort := roDestComp connectedPortElement.				internalContainer add: roDestComp.				connections add: (Array with: sourceComponent with: sourcePort with: roDestComp with: roDestPort).			] ifFalse: [ "if the target component is already instanciated and identified by a composite's internal required port"				connections do: [ :c |					((c at: 1) = 'self') & ((c at: 2) = destComponent) ifTrue: [ 						roDestComp := c at: 3.						roDestComp provsContainer elements do: [ :e |							isInstance ifTrue: [ 								e label = (destPort, ' *') ifTrue: [ roDestPort := e ] ] 							ifFalse: [  								e label = destPort ifTrue: [ roDestPort := e ] 							]						]					] 				]			]		].		self connect: roSourcePort to: roDestPort.	]! !!ROCompoComponent methodsFor: 'drawing' stamp: 'Fred 10/12/2014 16:34'!connect: aReqsPortElement to: aProvsPortElement	"Creates the link between aReqsPortElement and aProvsPortElement."	((aProvsPortElement isKindOf: ROCompoProvidedPort) & (aReqsPortElement isKindOf: ROCompoRequiredPort )) ifTrue: [ 		| link |		aProvsPortElement symbolElement isConnected: true.		aReqsPortElement symbolElement isConnected: true.		aReqsPortElement symbolElement connectedElement: (aProvsPortElement symbolElement ); draw.		aProvsPortElement symbolElement connectedElement: (aReqsPortElement symbolElement); draw.		self buildEdges.	]! !!ROCompoComponent methodsFor: 'initialization' stamp: 'Fred 7/31/2014 15:03'!initialize 	super initialize.	self @ RODraggable! !!ROCompoComponent methodsFor: 'initialization' stamp: 'Fred 7/31/2014 14:45'!modelChanged 	"Method called once the model has been set. It builds the lists of ports contained in the component. It also sets label."	provsPorts := OrderedCollection new.	intProvsPorts := OrderedCollection new.	reqsPorts := OrderedCollection new.	intReqsPorts := OrderedCollection new.			label := model name.	isInstance ifTrue: [ label := label, ' *'].		self getPortDescriptions do: [:desc |		|role visibility|		role := ((((((desc instVarNamed: #ports) at: #role) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		visibility := ((((((desc instVarNamed: #ports) at: #visibility) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		((role = #required) and: [ visibility = #internal ])			ifTrue: [ intReqsPorts add: desc ].		((role = #required) and: [ visibility = #external ])			ifTrue: [ reqsPorts add: desc ].		((role = #provided) and: [ visibility = #internal ])			ifTrue: [ intProvsPorts add: desc].		((role = #provided) and: [ visibility = #external ])			ifTrue: [ provsPorts add: desc ].	].	self buildContainers.! !!ROCompoComponent methodsFor: 'actions' stamp: 'Fred 7/29/2014 15:49'!addAction	| componentList result roComponent |	componentList := self getSubcomponentOf: Component.	result := UIManager default chooseFrom: (componentList asArray).	result > 0 ifTrue: [ 		roComponent := (ROCompoInternalComponent on: (Smalltalk at:((componentList at: result) asSymbol)) byPort: nil).		roComponent isModifiable: false.		internalContainer add: roComponent.		ROVerticalLineLayout on: (internalContainer elements).		self buildEdges.		self resize.		view signalUpdate.	]	! !!ROCompoComponent methodsFor: 'actions' stamp: 'Fred 7/16/2014 13:41'!gotoAction! !!ROCompoComponent methodsFor: 'actions' stamp: 'Fred 7/28/2014 16:13'!removeAction	view allElementsDo: [ :e | 		e remove. 	].	view add: (ROCompoGraphicEditor on: NewComponent).	view signalUpdate.! !!ROCompoComponent methodsFor: 'accessing-computed' stamp: 'Fred 6/24/2014 10:19'!defaultComponentSize	^300! !!ROCompoComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/31/2014 14:39'!getSubcomponentOf: aComponentDescriptor	"Returns an array composed of subclasses of aComponentDescriptor. This method is used in ROCompoComponent>>addAction" 	| ar |	ar := SortedCollection new.	ar add: aComponentDescriptor name.	aComponentDescriptor subclasses do: [ :s |		ar addAll: (self getSubcomponentOf: s) 	].	^ ar! !!ROCompoComponent methodsFor: 'accessing-computed' stamp: 'Fred 7/31/2014 15:08'!internalComponentDescriptorFromPort: aPortDescriptor 	"Returns the descriptor of the component connected to aPortDescriptor which has model as owner. It must be used for simple ports. I must extend it to collection ports. THIS METHOD IS DEPRECATED BUT SHOWS ANOTHER WAY TO INTROSPECT THE MODEL."	|portList name intermediateArray targetComponent targetPort|	name := ((((((aPortDescriptor instVarNamed: #ports) at: #name) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner. "gets the name of the desc port as symbol."	portList := ((model newC) instVarNamed: #owner) instVarNamed: #ports. "gets an array containing the ports used in model component. I must create a model instance to get component inner links."	portList isNil ifFalse:[	intermediateArray := (((portList at: (name asSymbol)) instVarNamed: #ports) at: #connectedPorts) instVarNamed: #connectedPorts.	(intermediateArray instVarNamed: #lastIndex) > 0 	ifTrue:[		| tabC |		targetComponent := (((intermediateArray at: 1) instVarNamed: #owner) cs__getDescriptor) instVarNamed: #owner. "gets the component connected at portList at: name"		targetPort := ((((((intermediateArray at: 1) cs__getDescriptor) instVarNamed: #ports) at: #name) instVarNamed: #connectedPorts) at: 1) instVarNamed: #owner.		tabC:= OrderedCollection new.		tabC add: ((intermediateArray at: 1) instVarNamed: #owner); add: targetPort.		^tabC		]	].	^ nil! !!ROCompoComponent methodsFor: 'accessing-computed' stamp: 'Fred 6/24/2014 10:15'!model: aComponentDescriptor	model := aComponentDescriptor! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoComponent class	instanceVariableNames: ''!!ROCompoComponent class methodsFor: 'as yet unclassified' stamp: 'Fred 10/12/2014 12:38'!asInstanceOf: aComponentDescriptor 	| inst |	inst := self new.	inst model: aComponentDescriptor.	inst 		isLinkable: false; 		hasMenu: false; 		isModifiable: false;		isInstance: true;		isInOptionBar: false; 		modelChanged.	^inst! !!ROCompoComponent class methodsFor: 'as yet unclassified' stamp: 'Fred 7/11/2014 11:32'!on: aComponentDescriptor 	| inst |	inst := self new.	inst model: aComponentDescriptor.	inst modelChanged.	^inst! !!ROCompoComponent class methodsFor: 'as yet unclassified' stamp: 'Fred 7/16/2014 15:34'!on: aComponentDescriptor usingSyntaxTree: anAst	| inst |	inst := self new.	inst model: aComponentDescriptor.	inst astNode: anAst.	inst modelChanged.	^inst! !ROCompoAbstractInteractiveElement subclass: #ROCompoAbstractContainer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoAbstractContainer commentStamp: '<historical>' prior: 0!A ROCompoAbstractContainer is a ROElement that contains some elements to display.Instance Variables!!ROCompoAbstractContainer methodsFor: 'initialization' stamp: 'Fred 7/15/2014 11:53'!initialize 	super initialize.! !!ROCompoAbstractContainer methodsFor: 'drawing' stamp: 'Fred 7/9/2014 15:16'!buildEdges	self elements do: [ :elem |		(elem isKindOf: ROCompoAbstractComponent) | (elem isKindOf: ROCompoAbstractPort) ifTrue: [ 			elem buildEdges		]	]! !!ROCompoAbstractContainer methodsFor: 'drawing' stamp: 'Fred 7/25/2014 16:05'!resize	ROVerticalLineLayout on: (self elements).	self centeringElements.	self height: (parent height - 10).	((self parent) isKindOf: ROElement) ifTrue: [ 		self parent resize 	].	! !!ROCompoAbstractContainer methodsFor: 'actions' stamp: 'Fred 7/16/2014 11:30'!addAction	parent addAction! !!ROCompoAbstractContainer methodsFor: 'actions' stamp: 'Fred 7/16/2014 13:48'!gotoAction	parent gotoAction! !!ROCompoAbstractContainer methodsFor: 'actions' stamp: 'Fred 7/17/2014 17:13'!removeAction 	parent removeAction! !!ROCompoAbstractContainer methodsFor: 'actions' stamp: 'Fred 7/17/2014 17:14'!renameAction	parent renameAction! !!ROCompoAbstractContainer methodsFor: 'accessing' stamp: 'Fred 7/16/2014 14:00'!astNode 	^ parent astNode! !!ROCompoAbstractContainer methodsFor: 'accessing' stamp: 'Fred 7/16/2014 14:00'!astNode: anAstNode	parent astNode: anAstNode! !!ROCompoAbstractContainer methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:12'!centeringElements	"Method used to center ports in their container"	1 to: 2 by: 1 do: [ :i | 		self elements do: [ :e | e centerX: (self width / 2) ].	].! !ROCompoAbstractPort subclass: #ROCompoProvidedPort	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoProvidedPort commentStamp: '<historical>' prior: 0!A ROCompoProvidedPort is a ROElement that represents a provided port.Instance Variables!!ROCompoProvidedPort methodsFor: 'interaction' stamp: 'Fred 7/25/2014 11:31'!buildMouseDraggedHandler 	self on: ROMouseDragged do: [ :event |		| targetElement |		targetElement := (self view elementAtRealPosition: event position).		(targetElement isKindOf: ROElement) ifTrue: [ 			(targetElement parent isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [				(selection contains: targetElement) ifTrue: 				[ 					| provsPort |					provsPort := ROCompoProvidedPort labelled: (self label).					targetElement add: provsPort.					targetElement resize.					targetElement buildEdges.					view signalUpdate.					"provsPort addPortToAst."				] 			]		].		(self shapes at: 1) color: Color transparent.		selection clear. 		view signalUpdate.		]! !!ROCompoProvidedPort methodsFor: 'interaction' stamp: 'Fred 7/16/2014 16:46'!buildSelection	selection := ROSelection new 		for: [ :source :target |			(target isKindOf: ROCompoProvsContainer)				ifTrue: [ target isModifiable ] 				ifFalse: [ false ]		];		onInclusion: [ :element | (element shapes at: 1) color: Color green];		onExclusion: [ :element | (element shapes at: 1) color: Color transparent ].! !!ROCompoProvidedPort methodsFor: 'drawing' stamp: 'Fred 7/28/2014 15:22'!buildEdges	| link |	super buildEdges.	link := ROEdge from: textElement to: (symbolElement connectedSymbol).	link + (ROOrthoHorizontalLineShape new color: Color black).	self add: link.! !!ROCompoProvidedPort methodsFor: 'drawing' stamp: 'Fred 7/15/2014 14:05'!draw 	| translation |	super draw.	symbolElement := ROCompoProvidedPortSymbol sized: (textElement height).	symbolElement draw.	self add: symbolElement; add: textElement.	ROHorizontalLineLayout on: self elements.	translation := ((self width/2) - (textElement center x))@0.	symbolElement translateBy: translation.	textElement center: (self width /2)@(textElement center y).! !!ROCompoProvidedPort methodsFor: 'as yet unclassified' stamp: 'Fred 7/31/2014 15:18'!addPortToAst	"Used in code generation. Adds a new node to the AST."	| node portNode |	"node := (self astNode body at: 1) ports. "	node := OrderedCollection new.	node addAll: ((self astNode body at: 1) ports).	portNode := CompoPortNode new. "portNode := GraphicCompoPortNode"	portNode 		parent: node;		comments: nil;		pName: (self label); 		pInterface: '*';		pKind: nil;		pIsCollectionPort: false;		pInjection: nil.	node add: portNode.	(self astNode body at: 1) ports: (node asArray).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoProvidedPort class	instanceVariableNames: ''!!ROCompoProvidedPort class methodsFor: 'as yet unclassified' stamp: 'Fred 7/25/2014 11:38'!asOptionButton	| inst |	inst := super asOptionButton.	inst label: 'provided'.	^ inst.! !ROCompoAbstractInteractiveElement subclass: #ROCompoTextElement	instanceVariableNames: 'label'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoTextElement commentStamp: '<historical>' prior: 0!A ROCompoTextElement is ROElement that display a String. It is used to display ports' and components' names. Instance Variables	label:		<String>label	- the string to display.!!ROCompoTextElement methodsFor: 'interaction' stamp: 'Fred 2/3/2015 17:04'!buildMouseDraggingHandler	self forward! !!ROCompoTextElement methodsFor: 'accessing' stamp: 'Fred 7/16/2014 14:02'!astNode	^parent astNode! !!ROCompoTextElement methodsFor: 'accessing' stamp: 'Fred 7/16/2014 14:02'!astNode: anAstNode	parent astNode: anAstNode ! !!ROCompoTextElement methodsFor: 'accessing' stamp: 'Fred 7/15/2014 13:50'!label	^label! !!ROCompoTextElement methodsFor: 'accessing' stamp: 'Fred 7/29/2014 11:58'!label: aString	label := aString! !!ROCompoTextElement methodsFor: 'actions' stamp: 'Fred 7/16/2014 11:30'!addAction	parent addAction! !!ROCompoTextElement methodsFor: 'actions' stamp: 'Fred 7/16/2014 13:47'!gotoAction	parent gotoAction! !!ROCompoTextElement methodsFor: 'actions' stamp: 'Fred 7/15/2014 13:54'!removeAction	parent removeAction! !!ROCompoTextElement methodsFor: 'actions' stamp: 'Fred 7/17/2014 17:14'!renameAction	parent renameAction! !!ROCompoTextElement methodsFor: 'initialization' stamp: 'Fred 10/12/2014 12:44'!modelChanged	self shapesDo: [ :s | self removeShape: (s class) ].	self + (ROLabel new text: label).	isInOptionBar 		ifTrue: [ self + (ROBox new color: (Color black veryMuchLighter); borderWidth: 1; borderColor: Color black) ]		ifFalse: [ self + (ROBox new color: Color white; borderWidth: 1; borderColor: Color black) ]			! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoTextElement class	instanceVariableNames: ''!!ROCompoTextElement class methodsFor: 'as yet unclassified' stamp: 'Fred 7/15/2014 13:53'!withText: aString	| inst |	inst := self new.	inst label: aString.	inst modelChanged.	^inst! !ROCompoAbstractContainer subclass: #ROCompoInternalContainer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoInternalContainer commentStamp: '<historical>' prior: 0!A ROCompoInternalContainer is a ROElement that contains all internal elements of a component/subcomponent.Instance Variables!!ROCompoInternalContainer methodsFor: 'as yet unclassified' stamp: 'Fred 7/25/2014 16:05'!centeringElements! !ROCompoAbstractContainer subclass: #ROCompoReqsContainer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoReqsContainer commentStamp: '<historical>' prior: 0!A ROCompoReqsContainer is ROElement that contains the elements displayed on the right side of a component/subcomponent like the required ports.Instance Variables!!ROCompoReqsContainer methodsFor: 'drawing' stamp: 'Fred 7/25/2014 16:03'!resize	(self width < 20) ifTrue: [ 		self width: 20	].	super resize.! !ROCompoAbstractContainer subclass: #ROCompoProvsContainer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoProvsContainer commentStamp: '<historical>' prior: 0!A ROCompoProvsContainer is a ROElement that contains the elements to display on the right side of a component/subcomponent like provided ports and internal required ports.Instance Variables!!ROCompoProvsContainer methodsFor: 'drawing' stamp: 'Fred 7/25/2014 16:01'!resize	(self width < 10) ifTrue: [ 		self width: 10	].	super resize.! !ROCompoAbstractInteractiveElement subclass: #ROCompoAbstractPortSymbol	instanceVariableNames: 'isConnected symbSize connectedSymbol connectedElement'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoAbstractPortSymbol commentStamp: '<historical>' prior: 0!A ROCompoAbstractPortSymbol is a ROElement that represents the symbol (connection node) of a port.Instance Variables	connectedElement:		<ROCompoAbstractPortSymbol>	connectedSymbol:		<ROElement>	isConnected:		<Boolean>	symbSize:		<Integer>connectedElement	- if the port containing the symbol is connected, it represents the symbol connected to the current element.connectedSymbol	- represents the subelement of the current element used in connections.isConnected	- is true if the port containing the current element is connected.symbSize	- is the height of the symbol.!!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/16/2014 14:01'!astNode	^ parent astNode! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/16/2014 14:01'!astNode: anAstNode	parent astNode: anAstNode ! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/17/2014 17:48'!connectedElement	^connectedElement ! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/17/2014 17:48'!connectedElement: aROCompoProvidedPortSymbol 	connectedElement := aROCompoProvidedPortSymbol ! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/11/2014 13:54'!connectedSymbol	^connectedSymbol! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/11/2014 13:54'!connectedSymbol: aROElement	connectedSymbol := aROElement.	self buildInteractions.! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/2/2014 16:33'!isConnected	^isConnected! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/11/2014 13:55'!isConnected: aBoolean	isConnected := aBoolean.! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/2/2014 16:49'!symbSize	^symbSize! !!ROCompoAbstractPortSymbol methodsFor: 'accessing' stamp: 'Fred 7/2/2014 16:49'!symbSize: aNumber	symbSize := aNumber! !!ROCompoAbstractPortSymbol methodsFor: 'drawing' stamp: 'Fred 7/31/2014 15:21'!draw	"Builds the elements to display."	self allElementsDo: [ :e | e remove].	self shapes do: [ :s | self removeShape: (s class) ]! !!ROCompoAbstractPortSymbol methodsFor: 'initialization' stamp: 'Fred 7/31/2014 12:01'!initialize 	super initialize.	isConnected := false	! !!ROCompoAbstractPortSymbol methodsFor: 'actions' stamp: 'Fred 7/16/2014 11:30'!addAction	parent addAction! !!ROCompoAbstractPortSymbol methodsFor: 'actions' stamp: 'Fred 7/16/2014 13:47'!gotoAction	parent gotoAction! !!ROCompoAbstractPortSymbol methodsFor: 'actions' stamp: 'Fred 7/28/2014 15:52'!removeAct	isConnected ifTrue: [ 		connectedElement isConnected: false.		connectedElement connectedSymbol removeInteraction: RODynamicEdge.		connectedElement draw.		connectedElement parent buildEdges.		connectedElement connectedElement: nil.	].	self allElementsDo: [ :e | e remove ].	self remove.! !!ROCompoAbstractPortSymbol methodsFor: 'actions' stamp: 'Fred 7/17/2014 17:45'!removeAction	self removeAct.	parent removeAction! !!ROCompoAbstractPortSymbol methodsFor: 'actions' stamp: 'Fred 7/15/2014 18:22'!renameAction	parent renameAction! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoAbstractPortSymbol class	instanceVariableNames: ''!!ROCompoAbstractPortSymbol class methodsFor: 'as yet unclassified' stamp: 'Fred 7/2/2014 16:48'!sized: aNumber	^self new symbSize: aNumber.! !ROCompoAbstractPortSymbol subclass: #ROCompoProvidedPortSymbol	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoProvidedPortSymbol commentStamp: '<historical>' prior: 0!A ROCompoProvidedPortSymbol is a ROElement displaying a provided port symbol (connection node).Instance Variables!!ROCompoProvidedPortSymbol methodsFor: 'drawing' stamp: 'Fred 7/28/2014 14:34'!draw	super draw.	isConnected 		ifTrue: [ 			| whiteSquare circle |			self size: symbSize.			self resizeStrategy: (ROPermissiveParent new).			self + (ROEllipse new						color: Color transparent;						borderColor: Color black;						borderWidth: 2).			whiteSquare := ROElement new width: (self height / 2); height: (self height); + (ROBox new color: Color white).			circle := ROElement new size: (2/3*(self height));				+ (ROEllipse new						color: Color transparent;						borderColor: Color black;						borderWidth: 2).			self add: whiteSquare; add: circle.			whiteSquare setBounds: (((whiteSquare width)@0)extent: ((whiteSquare width)@(whiteSquare height))).			"whiteSquare translateBy: (whiteSquare width)@0."			"circle center: (self center)."			circle setBounds: ((((self width / 2) - (1/2*(circle width)))@((self height / 2) - (1/2*(circle height)))) extent: (circle width@circle height)).			connectedSymbol := circle		 ]		ifFalse: [ 			self size: symbSize.			self + 				( ROEllipse new 					color: Color white; 					borderColor: Color black; 					borderWidth: 2 ).			connectedSymbol := self		 ].	self buildInteractions.! !!ROCompoProvidedPortSymbol methodsFor: 'interaction' stamp: 'Fred 7/11/2014 13:12'!buildMouseDraggedHandler 	! !!ROCompoProvidedPortSymbol methodsFor: 'interaction' stamp: 'Fred 7/11/2014 13:12'!buildMouseDraggingHandler ! !ROCompoAbstractPortSymbol subclass: #ROCompoRequiredPortSymbol	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoRequiredPortSymbol commentStamp: '<historical>' prior: 0!A ROCompoRequiredPortSymbol is a ROElement displaying a required port symbol (connection node).Instance Variables!!ROCompoRequiredPortSymbol methodsFor: 'drawing' stamp: 'Fred 10/12/2014 16:11'!draw	| whiteSquare |	super draw.	isConnected 		ifTrue: [ 			connectedSymbol := (parent textElement)		]		ifFalse: [			connectedSymbol := ROElement new size: symbSize; + (ROEllipse new color: Color transparent; borderColor: Color black; borderWidth: 2).			whiteSquare := ROElement new height: symbSize; width: (symbSize / 2).			isInOptionBar 				ifTrue: [ whiteSquare + (ROBox new color: (Color black veryMuchLighter)) ]				ifFalse: [ whiteSquare + (ROBox new color: Color white) ].			self add: connectedSymbol; add: whiteSquare.			whiteSquare translateBy: (whiteSquare width)@0.		].	self buildInteractions.! !!ROCompoRequiredPortSymbol methodsFor: 'interaction' stamp: 'Fred 2/3/2015 17:18'!buildMouseDraggedHandler  	(connectedSymbol isNil | isInOptionBar) ifFalse: [		connectedSymbol on: ROMouseDragged do: [ :event |			| targetElement |			targetElement := (self view elementAtRealPosition: event position).			isConnected ifTrue: [ 				(connectedSymbol shapes at: 1) color: Color white.				connectedSymbol removeAllEdgesFrom.				connectedSymbol removeInteraction: RODynamicEdge.				isConnected := false.				self draw.				connectedElement isConnected: false.				connectedElement draw.				self parent buildEdges.				connectedElement parent buildEdges.			] ifFalse: [ 				(targetElement isKindOf: ROCompoAbstractInteractiveElement) ifTrue: [					(selection contains: targetElement) ifTrue: [ 						self dropActionOn: targetElement					]				]				ifFalse: [ 					(targetElement isKindOf: ROElement) & (targetElement parent isKindOf: ROCompoAbstractInteractiveElement) 					ifTrue: [ 						(selection contains: (targetElement parent)) ifTrue: [							| edge temp |							temp := targetElement parent.							targetElement remove.							targetElement := temp.							self dropActionOn: (targetElement "parent").						] 					]				].				(connectedSymbol shapes at: 1) color: Color white.				"self addConnectionToAst."			].			selection clear. 			view signalUpdate.		].	]! !!ROCompoRequiredPortSymbol methodsFor: 'interaction' stamp: 'Fred 2/3/2015 17:18'!buildMouseDraggingHandler	(connectedSymbol isNil | isInOptionBar) ifFalse: [ 		connectedSymbol on: ROMouseDragging do: [ :event |			self isLinkable ifTrue: [ 				(connectedSymbol shapes at: 1) color: (self defaultSelectionColor).				self view allElementsDo: [ :candidateTarget |					selection source: connectedSymbol target: candidateTarget.				].				view signalUpdate			]		]	] ! !!ROCompoRequiredPortSymbol methodsFor: 'interaction' stamp: 'Fred 7/16/2014 18:02'!buildSelection	selection := ROSelection new		for: [ :source :target | 			(target isKindOf: ROCompoProvidedPortSymbol) & (target isConnected == false)				ifTrue: [ target isLinkable 							"ifTrue: [ 								(target parent parent isKindOf: ROCompoInternalContainer) & (source parent parent parent isKindOf: ROCompoComponent) 									ifTrue: [ false ]									ifFalse: [ 										 ]						 	] 							ifFalse: [ false ]"						] 				ifFalse: [ false ]		];		onInclusion: [ :element | (element connectedSymbol shapes at: 1) color: Color green ];		onExclusion: [ :element | (element shapes at: 1) color: Color transparent ].! !!ROCompoRequiredPortSymbol methodsFor: 'as yet unclassified' stamp: 'Fred 7/17/2014 18:38'!addConnectionToAstWith: targetElement	| node reqsPortNode provsPortNode connectionNode targetComponent |	targetComponent := targetElement parent parent parent.	node := OrderedCollection new.	node addAll: ((self astNode body at: 4) conns).	reqsPortNode := CompoPortAddressNode new.	provsPortNode := CompoPortAddressNode new.	reqsPortNode 		left: (parent label);		right: (parent parent parent label).	provsPortNode left: (parent label).	((parent parent parent label) == (self astNode name)) ifTrue: [ 		(((targetComponent label == (self astNode name)) not) & ((Smalltalk at: (targetComponent label asSymbol)) isNil) not)			ifTrue: [ 				targetComponent isInstanciated not ifTrue: [					| serviceInvocationNode | 					targetComponent isInstanciated: true.					targetComponent compositeInstancePort: (self parent).					serviceInvocationNode := CompoServiceInvocationNode new.					serviceInvocationNode 						parent: provsPortNode;						receiver: (targetComponent label);						selector: 'new';						arguments: nil.					provsPortNode right: serviceInvocationNode				] ifFalse: [ 					provsPortNode right: (targetComponent compositeInstancePort label)				]			] ifFalse: [ 				provsPortNode right: (targetComponent label)			]	] ifFalse: [ 		provsPortNode right: (targetComponent label) 	].	connectionNode := CompoConnectionNode new.	connectionNode 		srcAddress: reqsPortNode;		destAddress: provsPortNode;		kind: nil.	node add: connectionNode.	(self astNode body at: 4) conns: (node asArray).	(Smalltalk at: (targetComponent label asSymbol)) isNil not ifTrue: [ 		(self astNode body at: 2) ports do: [ :p |			(p pName) == (targetElement parent label) ifTrue: [				p pInterface: (targetComponent label)			]		]	]! !!ROCompoRequiredPortSymbol methodsFor: 'as yet unclassified' stamp: 'Fred 7/28/2014 15:45'!dropActionOn: targetElement	(connectedSymbol shapes at: 1) color: Color white.	targetElement isConnected: true.	self isConnected: true.	targetElement draw.	self draw.	connectedElement := targetElement.	connectedElement connectedElement: self.	targetElement parent buildEdges.	self parent buildEdges.! !ROElement subclass: #ROCompoGraphicEditor	instanceVariableNames: 'model component isInstanceDescription'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Roassal'!!ROCompoGraphicEditor commentStamp: '<historical>' prior: 0!A ROCompoGraphicEditor is the main ROElement describing a component.Instance Variables	component:		<ROCompoComponent>	isInstanceDescription:		<Boolean>	model:		<Descriptor>component	- the component to display.isInstanceDescription	- is true if it's an instance of a component that is described and not a descriptor.model	- the component descriptor to describe.!!ROCompoGraphicEditor methodsFor: 'accessing' stamp: 'Fred 7/29/2014 12:01'!component	^component! !!ROCompoGraphicEditor methodsFor: 'accessing' stamp: 'Fred 7/29/2014 12:02'!component: aROCompoComponent	component := aROCompoComponent! !!ROCompoGraphicEditor methodsFor: 'accessing' stamp: 'Fred 7/8/2014 17:09'!model: aComponentDescriptor 	model:= aComponentDescriptor! !!ROCompoGraphicEditor methodsFor: 'initialization' stamp: 'Fred 7/29/2014 15:54'!modelChanged	isInstanceDescription 		ifTrue: [ component := ROCompoComponent asInstanceOf: model ] 		ifFalse: [ component := ROCompoComponent on: model ].	self add: component.	self allElementsDo: [ :e |		(e isKindOf: ROCompoAbstractContainer) ifTrue: [ 			e resize		]  	].	ROVerticalLineLayout on: self elements! !!ROCompoGraphicEditor methodsFor: 'as yet unclassified' stamp: 'Fred 7/29/2014 14:39'!isInstanceDescription	^isInstanceDescription! !!ROCompoGraphicEditor methodsFor: 'as yet unclassified' stamp: 'Fred 7/29/2014 15:15'!isInstanceDescription: aBoolean	isInstanceDescription := aBoolean! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ROCompoGraphicEditor class	instanceVariableNames: ''!!ROCompoGraphicEditor class methodsFor: 'as yet unclassified' stamp: 'Fred 7/29/2014 15:06'!on: aComponentDescriptor	| inst |	inst := self new.	inst model: aComponentDescriptor.	inst isInstanceDescription: false.	inst modelChanged.	^inst! !!ROCompoGraphicEditor class methodsFor: 'as yet unclassified' stamp: 'Fred 7/29/2014 14:37'!onInstanceOf: aComponentDescriptor	| inst |	inst := self new.	inst model: aComponentDescriptor.	inst isInstanceDescription: true.	inst modelChanged.	^inst! !